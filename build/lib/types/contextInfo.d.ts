import { Types } from "../..";
import { Types as BaseTypes } from "../../utils";
export interface IContextInformation {
    aadInstanceUrl: string;
    aadTenantId: string;
    alertsEnabled: boolean;
    allowSilverlightPrompt: boolean;
    blockDownloadsExperienceEnabled: boolean;
    canUserCreateMicrosoftForm: boolean;
    canUserCreateVisioDrawing: boolean;
    cdnPrefix: string;
    clientServerTimeDelta: number;
    CorrelationId: string;
    crossDomainPhotosEnabled: boolean;
    currentCultureLCID: string;
    currentCultureName: string;
    currentLanguage: string;
    currentUICultureName: string;
    departmentId: string;
    DesignPackageId: string;
    disableAppViews: boolean;
    disableFlows: boolean;
    document: HTMLDocument;
    env: string;
    existsFl: boolean;
    farmLabel: string;
    fid: string;
    formDigestTimeoutSeconds: number;
    formDigestValue: string;
    groupColor: string;
    groupHasHomepage: boolean;
    groupId: string;
    groupType: string;
    guestsEnabled: boolean;
    hasManageWebPermissions: boolean;
    hasPendingWebTemplateExtension: boolean;
    hideSyncButtonOnODB: boolean;
    hubSiteId: boolean;
    idleSessionSignOutEnabled: boolean;
    isAnonymousGuestUser: boolean;
    isAppWeb: boolean;
    isEmailAuthenticatinoGuesUser: boolean;
    isExternalGuestUser: boolean;
    isHubSite: boolean;
    isMultiGeoTenant: boolean;
    isNoScriptEnabled: boolean;
    isSiteAdmin: boolean;
    isSPO: boolean;
    isTenantDevSite: boolean;
    isWebWelcomePage: boolean;
    layoutsUrl: string;
    listBaseTemplate: number;
    listId: string;
    listPermMask: Types.SP.IBasePermissions;
    listTitle: string;
    listUrl: string;
    maximumFileSize: number;
    nid: string;
    openInClient: boolean;
    pageItemId: number;
    pageListId: string;
    pagePermMask: Types.SP.IBasePermissions;
    pagePersonalizationScope: number;
    preferUserTimeZone: boolean;
    PreviewFeaturesEnabled: boolean;
    profileUrl: string;
    PublishingFeatureOn: boolean;
    RecycleBinItemCount: number;
    serverRedirectedUrl: string;
    serverRequestPath: string;
    serverTime: string;
    showNGSCDialogForSyncOnODB: boolean;
    showNGSCDialogForSyncOnTS: boolean;
    siteAbsoluteUrl: string;
    siteClassification: string;
    siteClientTag: string;
    siteColor: string;
    siteId: string;
    sitePagesEnabled: boolean;
    siteServerRelativeUrl: string;
    siteSubscriptionId: string;
    supportPercentStorePage: boolean;
    supportPoundStorePath: boolean;
    systemUserKey: string;
    tenantAppVersion: string;
    themeCacheToken: string;
    themeCssFolderUrl: string;
    themeImageFileNames: any;
    updateFromDigestPageLoaded: Date;
    userDisplayName: string;
    userEmail: string;
    userFirstDayOfWeek: any;
    userId: number;
    userLoginName: string;
    userTime24: boolean;
    userTimeZoneData: any;
    viewId: string;
    viewOnlyExperienceEnabled: boolean;
    webAbsoluteUrl: string;
    webDescription: string;
    webFirstDayOfWeek: number;
    webId: string;
    webLanguage: number;
    webLogoUrl: string;
    webPermMask: Types.SP.IBasePermissions;
    webServerRelativeUrl: string;
    webTemplate: string;
    webTime24: boolean;
    webTitle: string;
    webUIVersion: number;
    window: {
        $REST: any;
        addEventListener: any;
        clearInterval: any;
        document: HTMLDocument;
        setInterval: any;
        SP: any;
        SPClientTemplates: any;
    };
    generateGUID: () => string;
    getWeb(url: string): BaseTypes.IBase<Types.SP.IContextWebInfo>;
}
