import { IBase, ITargetInfo } from "../../utils/types";
import { Types } from "../..";
import { ITenantAppCatalog, IWebInfo, IWebResult, IWebResults, IWebs } from ".";
export interface IWebCreationInformation {
    Description?: string;
    Language?: number;
    Title: string;
    Url: string;
    UseSamePermissionsAsParentSite?: boolean;
    WebTemplate: string;
}
export interface IWebInfo {
    Configuration: number;
    Created: string;
    Description: string;
    Id: string;
    Language: number;
    LastItemModifiedDate: string;
    LastItemUserModifiedDate: string;
    ServerRelativeUrl: string;
    Title: string;
    WebTemplate: string;
    WebTemplateId: number;
}
export interface IWebMethods {
    applyTheme(colorpaletteurl: any, fontschemeurl: any, backgroundimageurl: any, sharegenerated: any): IBase;
    applyWebTemplate(name: any): IBase;
    breakRoleInheritance(copyRoleAssignments: any, clearSubScopes: any): IBase;
    delete(): IBase;
    doesPushNotificationSubscriberExist(id: any): IBase;
    doesUserHavePermissions(high: any, low: any): IBase;
    ensureUser(loginName: string): IBase<Types.SP.IUser, Types.SP.IUserResult, Types.SP.IUserQueryResult>;
    executeRemoteLOB(inputStream: any): IBase;
    getAppBdcCatalog(): IBase;
    getAppBdcCatalogForAppInstance(id: any): IBase;
    getAppInstanceById(id: any): IBase;
    getAppInstancesByProductId(id: any): IBase;
    getAvailableWebTemplates(lcid: any, doIncludeCrossLanguage: any): IBase;
    getCatalog(galleryType: any): IBase;
    getChanges(query: any): IBase;
    getContextWebInformation(): IBase;
    getCustomListTemplates(): IBase;
    getDocumentLibraries(url: any): IBase;
    getEntity(namespace: any, name: any): IBase;
    getFileByServerRelativeUrl(url: any): Types.SP.IFile & IBase<Types.SP.IFile, Types.SP.IFileResult, Types.SP.IFileQueryResult>;
    getFolderByServerRelativeUrl(url: any): Types.SP.IFolder & IBase<Types.SP.IFolder, Types.SP.IFolderResult, Types.SP.IFolderQueryResult>;
    getList(url: any): Types.SP.IList & IBase<Types.SP.IList, Types.SP.IListResult, Types.SP.IListQueryResult>;
    getPushNotificationSubscriber(id: any): IBase;
    getPushNotificationSubscribersByArgs(args: any): IBase;
    getPushNotificationSubscribersByUser(loginName: any): IBase;
    getSubwebsFilteredForCurrentUser(nWebTemplateFilter: any, nConfigurationFilter: any): IBase<Types.SP.IResults<IWebInfo>>;
    getUserById(id: any): Types.SP.IUser & IBase<Types.SP.IUser, Types.SP.IUserResult, Types.SP.IUserQueryResult>;
    getUserEffectivePermissions(loginName: any): IBase;
    getWebUrlFromPageUrl(url: any): any;
    loadAndInstallApp(appPackageStream: any): IBase;
    loadAndInstallAppInSpecifiedLocale(appPackageStream: any, installationLocaleLCID: any): IBase;
    loadApp(appPackageStream: any, installationLocaleLCID: any): IBase;
    mapToIcon(filename: any, progid: any, size: any): IBase;
    processExternalNotification(stream: any): IBase;
    registerPushNotificationSubscriber(deviceAppInstanceId: any, serviceToken: any): IBase;
    resetRoleInheritance(): IBase;
    unregisterPushNotificationSubscriber(id: any): IBase;
    update(data: any): IBase;
}
export interface IWebProps {
    AllowRssFeeds: boolean;
    AppInstanceId: string;
    Configuration: number;
    Created: string;
    CustomMasterUrl: string;
    Description: string;
    DocumentLibraryCalloutOfficeWebAppPreviewersDisabled: boolean;
    EnableMinimalDownload: boolean;
    ExcludeFromOfflineClient: boolean;
    Id: string;
    Language: boolean;
    LastItemModifiedDate: string;
    MasterUrl: string;
    MembersCanShare: boolean;
    NoCrawl: boolean;
    NotificationsInOneDriveForBusinessEnabled: boolean;
    NotificationsInSharePointEnabled: boolean;
    OverwriteTranslationsOnChange: boolean;
    PreviewFeaturesEnabled: boolean;
    QuickLaunchEnabled: boolean;
    RecycleBinEnabled: boolean;
    RequestAccessEmail: string;
    SaveSiteAsTemplateEnabled: boolean;
    ServerRelativePath: Types.SP.IResourcePath;
    ServerRelativeUrl: string;
    SiteLogoDescription: string;
    SiteLogoUrl: string;
    SyndicationEnabled: boolean;
    TenantTagPolicyEnabled: boolean;
    ThemeData: string;
    ThemedCssFolderUrl: string;
    ThirdPartyMdmEnabled: boolean;
    Title: string;
    TreeViewEnabled: boolean;
    UIVersion: number;
    UIVersionConfigurationEnabled: boolean;
    Url: string;
    WebTemplate: string;
}
export interface IWebQueryProps {
    AllowCreateDeclarativeWorkflowForCurrentUser(): IBase<boolean>;
    AllowDesignerForCurrentUser(): IBase<boolean>;
    AllowMasterPageEditingForCurrentUser(): IBase<boolean>;
    AllProperties(): IBase<Types.SP.IPropertyValues>;
    AllowRevertFromTemplateForCurrentUser(): IBase<boolean>;
    AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser(): IBase<boolean>;
    AllowSavePublishDeclarativeWorkflowForCurrentUser(): IBase<boolean>;
    AllProperties(): IBase;
    AppTiles(): Types.SP.IAppTiles;
    AssociatedMemberGroup(): Types.SP.IGroup;
    AssociatedOwnerGroup(): Types.SP.IGroup;
    AssociatedVisitorGroup(): Types.SP.IGroup;
    Author(): Types.SP.IUser;
    AvailableContentTypes(): IBase<Types.SP.IContentTypes>;
    AvailableFields(): IBase<Types.SP.IFields>;
    ClientWebParts(): IBase;
    ContentTypes(): Types.SP.IContentTypes;
    ContentTypes(id: string): Types.SP.IContentType;
    CurrentUser(): Types.SP.IUser;
    DataLeakagePreventionStatusInfo(): IBase;
    DescriptionResource(): IBase<Types.SP.IResourcePath>;
    DesignerDownloadUrlForCurrentUser(): IBase;
    EffectiveBasePermissions(): IBase<string>;
    EventReceivers(): Types.SP.IEventReceivers;
    EventReceivers(id: string): Types.SP.IEventReceiver;
    Features(): IBase;
    Fields(): Types.SP.IFields;
    Fields(internalNameOrTitle: string): Types.SP.IField;
    Folders(): Types.SP.IFolders;
    Folders(url: string): Types.SP.IFolder;
    Lists(): Types.SP.ILists;
    Lists(name: string): Types.SP.IList;
    ListTemplates(): IBase;
    ListTemplates(name: string): IBase;
    Navigation(): IBase<Types.SP.INavigation>;
    ParentWeb(): IWeb;
    PushNotificationSubscribers(): IBase;
    RecycleBin(): IBase;
    RegionalSettings(): IBase;
    RoleDefinitions(): Types.SP.IRoleDefinitions;
    RoleDefinitions(name: string): Types.SP.IRoleDefinition;
    RootFolder(): Types.SP.IFolder;
    RootFolder(url: string): Types.SP.IFile;
    ShowUrlStructureForCurrentUser(): IBase;
    SiteGroups(): Types.SP.ISiteGroups;
    SiteGroups(name: string): Types.SP.IGroup;
    SiteUserInfoList(): IBase;
    SiteUsers(): Types.SP.IUsers;
    SiteUsers(id: any): Types.SP.IUser;
    SupportedUILanguageIds(): IBase<Number>;
    TenantAppCatalog(): ITenantAppCatalog;
    ThemeInfo(): IBase;
    TitleResource(): IBase<Types.SP.IResourcePath>;
    UserCustomActions(): Types.SP.IUserCustomActions;
    UserCustomActions(id: string): Types.SP.IUserCustomAction;
    WebInfos(): IBase;
    Webs(): IWebs;
    WorkflowAssociations(): IBase;
    WorkflowTemplates(): IBase;
}
export interface IWebQueryResult extends IWebMethods, IWebProps {
    AllowCreateDeclarativeWorkflowForCurrentUser?: boolean;
    AllowDesignerForCurrentUser?: boolean;
    AllowMasterPageEditingForCurrentUser?: boolean;
    AllowRevertFromTemplateForCurrentUser?: boolean;
    AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser?: boolean;
    AllowSavePublishDeclarativeWorkflowForCurrentUser?: boolean;
    AllProperties?: Array<string>;
    AppTiles?: Types.SP.IAppTiles;
    AssociatedMemberGroup: Types.SP.IGroupResult;
    AssociatedOwnerGroup: Types.SP.IGroupResult;
    AssociatedVisitorGroup: Types.SP.IGroupResult;
    Author: Types.SP.IUserResult;
    AvailableContentTypes: Types.SP.IResults<Types.SP.IContentTypeResult>;
    AvailableFields: Types.SP.IResults<Types.SP.IFieldResult>;
    ClientWebParts: IBase;
    ContentTypes: Types.SP.IContentTypeResults;
    CurrentUser: Types.SP.IUserResult;
    DataLeakagePreventionStatusInfo: Types.SP.IContainsConfidentialInfo;
    DescriptionResource: Types.SP.IResourcePath;
    DesignerDownloadUrlForCurrentUser: string;
    EffectiveBasePermissions: Types.SP.IBasePermissions;
    EventReceivers: Types.SP.IEventReceiverResults;
    Features: Types.SP.IResults<Types.SP.IFeature>;
    Fields: Types.SP.IFieldResults;
    Folders: Types.SP.IFolderResults;
    Lists: Types.SP.IListResults;
    ListTemplates: Types.SP.IResults<Types.SP.IListTemplate>;
    Navigation: Types.SP.INavigation;
    ParentWeb: IWebResult;
    PushNotificationSubscribers(): IBase;
    RecycleBin: Types.SP.IResults<Types.SP.IRecycleBinItem>;
    RegionalSettings: Types.SP.IRegionalSettings;
    RoleDefinitions: Types.SP.IRoleDefinitionResults;
    RootFolder: Types.SP.IFolderResult;
    ShowUrlStructureForCurrentUser: boolean;
    SiteGroups: Types.SP.ISiteGroupResults;
    SiteUserInfoList: Types.SP.IListResult;
    SiteUsers: Types.SP.IUserResults;
    SupportedUILanguageIds: Types.SP.IResults<number>;
    TenantAppCatalog: ITenantAppCatalog;
    ThemeInfo: Types.SP.IThemeInfo;
    TitleResource: Types.SP.IResourcePath;
    UserCustomActions: Types.SP.IUserCustomActionResults;
    WebInfos: Types.SP.IResults<IWebInfo>;
    Webs: IWebResults;
    WebTemplate: string;
    WorkflowAssociations: Types.SP.IResults<any>;
    WorkflowTemplates: Types.SP.IResults<Types.SP.IWorkflowTemplate>;
}
export interface IWebResult extends IWebMethods, IWebProps, IWebQueryProps, IBase<IWeb, IWebResult, IWebQueryResult> {
}
export interface IWeb extends IWebMethods, IWebQueryProps, IBase<IWeb, IWebResult, IWebQueryResult> {
    new (url?: string, targetInfo?: ITargetInfo): IWeb;
}
