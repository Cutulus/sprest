// Generated by dts-bundle v0.7.3

declare module 'gd-sprest' {
    import "core-js/es6/promise";
    import * as Helper from "gd-sprest/helper";
    import { SPTypes } from "gd-sprest/mapper";
    import * as Types from "gd-sprest/types";
    export * from "gd-sprest/lib";
    export * from "gd-sprest/rest";
    export { Helper, SPTypes, Types };
}

declare module 'gd-sprest/helper' {
    export * from "gd-sprest/helper/app";
    export * from "gd-sprest/helper/dependencies";
    export * from "gd-sprest/helper/fieldSchemaXML";
    export * from "gd-sprest/helper/jslink";
    export * from "gd-sprest/helper/listForm";
    export * from "gd-sprest/helper/listFormField";
    export * from "gd-sprest/helper/loader";
    export * from "gd-sprest/helper/parse";
    export * from "gd-sprest/helper/spCfg";
    export * from "gd-sprest/helper/taxonomy";
    export * from "gd-sprest/helper/webpart";
    import * as Types from "gd-sprest/helper/types";
    export { Types };
}

declare module 'gd-sprest/mapper' {
    import * as Mapper from "gd-sprest/mapper/mapper";
    import * as SPTypes from "gd-sprest/mapper/sptypes";
    import * as Types from "gd-sprest/mapper/types";
    export { Mapper, SPTypes, Types };
}

declare module 'gd-sprest/types' {
    import { Types as HelperTypes } from "gd-sprest/helper";
    import { Types } from "gd-sprest/mapper";
    import { Types as UtilTypes } from "gd-sprest/utils";
    export { HelperTypes as Helper, Types as SP, UtilTypes as Util };
}

declare module 'gd-sprest/lib' {
    export * from "gd-sprest/lib/contextInfo";
    export * from "gd-sprest/lib/jslink";
    export * from "gd-sprest/lib/list";
    export * from "gd-sprest/lib/navigation";
    export * from "gd-sprest/lib/peopleManager";
    export * from "gd-sprest/lib/peoplePicker";
    export * from "gd-sprest/lib/profileLoader";
    export * from "gd-sprest/lib/search";
    export * from "gd-sprest/lib/site";
    export * from "gd-sprest/lib/socialFeed";
    export * from "gd-sprest/lib/userProfile";
    export * from "gd-sprest/lib/utility";
    export * from "gd-sprest/lib/web";
    import * as Types from "gd-sprest/lib/types";
    export { Types };
}

declare module 'gd-sprest/rest' {
    import * as Helper from "gd-sprest/helper";
    import * as Lib from "gd-sprest/lib";
    import * as Mapper from "gd-sprest/mapper";
    import * as Util from "gd-sprest/utils";
    export interface IREST {
        __ver: number;
        ContextInfo: Lib.Types.IContextInformation;
        DefaultRequestToHostFl: boolean;
        Helper: {
            App: Helper.Types.IApp;
            Dependencies: Helper.Types.IDependencies;
            FieldSchemaXML: Helper.Types.IFieldSchemaXML;
            JSLink: Helper.Types.IJSLink;
            ListForm: Helper.Types.IListForm;
            ListFormField: Helper.Types.IListFormField;
            Loader: Helper.Types.ILoader;
            parse: (jsonString: string) => Util.Base;
            SPConfig: Helper.Types.ISPConfig;
            Taxonomy: Helper.Types.ITaxonomy;
            WebPart: Helper.Types.IWebPart;
        };
        List: (listName: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IList;
        Navigation: (url?: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.INavigationServiceREST;
        PeopleManager: (targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IPeopleManager;
        PeoplePicker: (settings?: Util.Types.ITargetInfo) => Mapper.Types.IPeoplePicker;
        ProfileLoader: (targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IProfileLoader;
        Search: (url?: string, settings?: Util.Types.ITargetInfo) => Mapper.Types.ISearch;
        SPTypes: any;
        Site: (url?: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.ISite;
        SocialFeed: Mapper.Types.ISocialFeed;
        UserProfile: (targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IUserProfile;
        Utility: (url?: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IUtility;
        Web: (url?: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IWeb;
    }
    export const $REST: any;
}

declare module 'gd-sprest/helper/app' {
    import { IApp } from "gd-sprest/helper/types";
    export const App: IApp;
}

declare module 'gd-sprest/helper/dependencies' {
    import { IDependencies } from "gd-sprest/helper/types";
    export const Dependencies: IDependencies;
}

declare module 'gd-sprest/helper/fieldSchemaXML' {
    import { IFieldSchemaXML } from "gd-sprest/helper/types";
    export const FieldSchemaXML: IFieldSchemaXML;
}

declare module 'gd-sprest/helper/jslink' {
    import { IJSLink } from "gd-sprest/helper/types";
    export const JSLink: IJSLink;
}

declare module 'gd-sprest/helper/listForm' {
    import * as ListFormTypes from "gd-sprest/helper/types";
    export const ListForm: ListFormTypes.IListForm;
}

declare module 'gd-sprest/helper/listFormField' {
    import * as ListFormFieldTypes from "gd-sprest/helper/types";
    export const ListFormField: ListFormFieldTypes.IListFormField;
}

declare module 'gd-sprest/helper/loader' {
    import { ILoader } from "gd-sprest/helper/types";
    export const Loader: ILoader;
}

declare module 'gd-sprest/helper/parse' {
    import { Base } from "gd-sprest/utils";
    export const parse: <T = Base<any, any, any>>(jsonString: string) => T;
}

declare module 'gd-sprest/helper/spCfg' {
    export * from "gd-sprest/helper/spCfgTypes";
    import { Types as SPCfgTypes } from "gd-sprest/helper";
    export const SPConfig: SPCfgTypes.ISPConfig;
}

declare module 'gd-sprest/helper/taxonomy' {
    import * as TaxonomyTypes from "gd-sprest/helper/types";
    export const Taxonomy: TaxonomyTypes.ITaxonomy;
}

declare module 'gd-sprest/helper/webpart' {
    import * as WebPartTypes from "gd-sprest/helper/types";
    export const WebPart: WebPartTypes.IWebPart;
}

declare module 'gd-sprest/helper/types' {
    export * from "gd-sprest/helper/types/app";
    export * from "gd-sprest/helper/types/dependencies";
    export * from "gd-sprest/helper/types/fieldSchemaXML";
    export * from "gd-sprest/helper/types/jslink";
    export * from "gd-sprest/helper/types/listForm";
    export * from "gd-sprest/helper/types/listFormField";
    export * from "gd-sprest/helper/types/loader";
    export * from "gd-sprest/helper/types/spCfg";
    export * from "gd-sprest/helper/types/spCfgTypes";
    export * from "gd-sprest/helper/types/taxonomy";
    export * from "gd-sprest/helper/types/webpart";
}

declare module 'gd-sprest/mapper/mapper' {
    export * from "gd-sprest/mapper/audit";
    export * from "gd-sprest/mapper/eventReceiver";
    export * from "gd-sprest/mapper/file";
    export * from "gd-sprest/mapper/list";
    export * from "gd-sprest/mapper/navigation";
    export * from "gd-sprest/mapper/propertyValues";
    export * from "gd-sprest/mapper/search";
    export * from "gd-sprest/mapper/security";
    export * from "gd-sprest/mapper/site";
    export * from "gd-sprest/mapper/social";
    export * from "gd-sprest/mapper/user";
    export * from "gd-sprest/mapper/userCustomAction";
}

declare module 'gd-sprest/mapper/sptypes' {
    import { SPTypes } from "gd-sprest/mapper/types";
    export const CalendarTypes: SPTypes.ICalendarType;
    export const CheckOutType: SPTypes.ICheckOutType;
    export const ChoiceFormatType: SPTypes.IChoiceFormatType;
    export const ClientTemplatesUtility: SPTypes.IClientTemplateUtility;
    export const ControlMode: SPTypes.IControlMode;
    export const DateFormat: SPTypes.IDateFormat;
    export const DraftVisibilityType: SPTypes.IDraftVisibilityType;
    export const EventReceiverSynchronizationType: SPTypes.IEventReceiverSynchronizationType;
    export const EventReceiverType: SPTypes.IEventReceiverType;
    export const FieldNoteType: SPTypes.IFieldNoteType;
    export const FieldNumberType: SPTypes.IFieldNumberType;
    export const FieldResultType: SPTypes.IFieldResultType;
    export const FieldType: SPTypes.IFieldType;
    export const FieldUserSelectionType: SPTypes.IFieldUserSelectionType;
    export const FileTemplateType: SPTypes.IFileTemplateType;
    export const FriendlyDateFormat: SPTypes.IFriendlyDateFormat;
    export const ListTemplateType: SPTypes.IListTemplateType;
    export const LocaleLCIDType: SPTypes.ILocaleLCIDType;
    export type NodeType = {
        None: 0;
        Area: 0;
        Page: 0;
        List: 0;
        ListItem: 0;
        PageLayout: 0;
        Heading: 0;
        AuthoredLinkToPage: 0;
        AuthoredLinkToWeb: 0;
        AuthoredLinkPlain: 0;
        Custom: 0;
        Error: 0;
        AuthoredLink: 0;
        Default: 0;
        All: 0;
    };
    export const PageType: SPTypes.IPageType;
    export const PersonalSiteCapabilities: SPTypes.IPersonalSiteCapabilities;
    export const PrincipalSources: SPTypes.IPrincipalSources;
    export const PrincipalTypes: SPTypes.IPrincipalTypes;
    export const RelationshipDeleteBehaviorType: SPTypes.IRelationshipDeleteBehaviorType;
    export const ReorderingRuleMatchType: SPTypes.IReorderingRuleMatchType;
    export const RoleType: SPTypes.IRoleType;
    export const UrlFormatType: SPTypes.IUrlFormatType;
    export const URLZones: SPTypes.IURLZones;
    export const UserCustomActionRegistrationType: SPTypes.IUserCustomActionRegistrationType;
    export const ViewType: SPTypes.IViewType;
}

declare module 'gd-sprest/mapper/types' {
    export * from "gd-sprest/mapper/types/attachment";
    export * from "gd-sprest/mapper/types/attachments";
    export * from "gd-sprest/mapper/types/audit";
    import * as ComplexTypes from "gd-sprest/mapper/types/complexTypes";
    export * from "gd-sprest/mapper/types/contentType";
    export * from "gd-sprest/mapper/types/contentTypes";
    export * from "gd-sprest/mapper/types/eventReceiver";
    export * from "gd-sprest/mapper/types/eventReceivers";
    export * from "gd-sprest/mapper/types/field";
    export * from "gd-sprest/mapper/types/fieldLink";
    export * from "gd-sprest/mapper/types/fieldLinks";
    export * from "gd-sprest/mapper/types/fields";
    export * from "gd-sprest/mapper/types/file";
    export * from "gd-sprest/mapper/types/files";
    export * from "gd-sprest/mapper/types/fileVersion";
    export * from "gd-sprest/mapper/types/fileVersions";
    export * from "gd-sprest/mapper/types/folder";
    export * from "gd-sprest/mapper/types/folders";
    export * from "gd-sprest/mapper/types/group";
    export * from "gd-sprest/mapper/types/groups";
    export * from "gd-sprest/mapper/types/items";
    export * from "gd-sprest/mapper/types/limitedWebPartManager";
    export * from "gd-sprest/mapper/types/list";
    export * from "gd-sprest/mapper/types/listItem";
    export * from "gd-sprest/mapper/types/lists";
    export * from "gd-sprest/mapper/types/navigation";
    export * from "gd-sprest/mapper/types/peopleManager";
    export * from "gd-sprest/mapper/types/peoplePicker";
    export * from "gd-sprest/mapper/types/profileLoader";
    export * from "gd-sprest/mapper/types/propertyValues";
    import * as Results from "gd-sprest/mapper/types/results";
    export * from "gd-sprest/mapper/types/roleAssignment";
    export * from "gd-sprest/mapper/types/roleAssignments";
    export * from "gd-sprest/mapper/types/roleDefinition";
    export * from "gd-sprest/mapper/types/roleDefinitions";
    export * from "gd-sprest/mapper/types/search";
    export * from "gd-sprest/mapper/types/site";
    export * from "gd-sprest/mapper/types/socialFeed";
    import * as SPTypes from "gd-sprest/mapper/types/sptypes";
    export * from "gd-sprest/mapper/types/tenantApp";
    export * from "gd-sprest/mapper/types/tenantAppCatalog";
    export * from "gd-sprest/mapper/types/tenantApps";
    export * from "gd-sprest/mapper/types/types";
    export * from "gd-sprest/mapper/types/user";
    export * from "gd-sprest/mapper/types/userCustomAction";
    export * from "gd-sprest/mapper/types/userCustomActions";
    export * from "gd-sprest/mapper/types/userProfile";
    export * from "gd-sprest/mapper/types/users";
    export * from "gd-sprest/mapper/types/utility";
    export * from "gd-sprest/mapper/types/version";
    export * from "gd-sprest/mapper/types/versions";
    export * from "gd-sprest/mapper/types/view";
    export * from "gd-sprest/mapper/types/viewFieldCollection";
    export * from "gd-sprest/mapper/types/views";
    export * from "gd-sprest/mapper/types/web";
    export * from "gd-sprest/mapper/types/webs";
    export { ComplexTypes, Results, SPTypes };
}

declare module 'gd-sprest/utils' {
    export * from "gd-sprest/utils/requestType";
    export * from "gd-sprest/utils/baseHelper";
    export * from "gd-sprest/utils/baseRequest";
    export * from "gd-sprest/utils/baseExecution";
    export * from "gd-sprest/utils/base";
    export * from "gd-sprest/utils/batch";
    export * from "gd-sprest/utils/methodInfo";
    export * from "gd-sprest/utils/oData";
    export * from "gd-sprest/utils/targetInfo";
    export * from "gd-sprest/utils/xhrRequest";
    import * as Types from "gd-sprest/utils/types";
    export { Types };
}

declare module 'gd-sprest/lib/contextInfo' {
    import { IContextInformation } from "gd-sprest/lib/types";
    export const ContextInfo: IContextInformation;
}

declare module 'gd-sprest/lib/jslink' {
    import { IJSLink } from "gd-sprest/lib/types";
    export const JSLink: IJSLink;
}

declare module 'gd-sprest/lib/list' {
    import { Types } from "gd-sprest/";
    export const List: Types.SP.IList;
}

declare module 'gd-sprest/lib/navigation' {
    import { INavigationServiceREST } from "gd-sprest/mapper/types";
    export const Navigation: INavigationServiceREST;
}

declare module 'gd-sprest/lib/peopleManager' {
    import { Types } from "gd-sprest/";
    export const PeopleManager: Types.SP.IPeopleManager;
}

declare module 'gd-sprest/lib/peoplePicker' {
    import { Types } from "gd-sprest/";
    export const PeoplePicker: Types.SP.IPeoplePicker;
}

declare module 'gd-sprest/lib/profileLoader' {
    import { Types } from "gd-sprest/";
    export const ProfileLoader: Types.SP.IProfileLoader;
}

declare module 'gd-sprest/lib/search' {
    import { Types } from "gd-sprest/";
    export const Search: Types.SP.ISearch;
}

declare module 'gd-sprest/lib/site' {
    import { Types } from "gd-sprest/";
    export const Site: Types.SP.ISite;
}

declare module 'gd-sprest/lib/socialFeed' {
    import { Types } from "gd-sprest/";
    export const SocialFeed: Types.SP.ISocialFeed;
}

declare module 'gd-sprest/lib/userProfile' {
    import { Types } from "gd-sprest/";
    export const UserProfile: Types.SP.IUserProfile;
}

declare module 'gd-sprest/lib/utility' {
    import { Types } from "gd-sprest/";
    export const Utility: Types.SP.IUtility;
}

declare module 'gd-sprest/lib/web' {
    import { Types } from "gd-sprest/";
    export const Web: Types.SP.IWeb;
}

declare module 'gd-sprest/lib/types' {
    export * from "gd-sprest/lib/types/contextInfo";
    export * from "gd-sprest/lib/types/jslink";
}

declare module 'gd-sprest/helper/spCfgTypes' {
    import { ISPCfgFieldType, ISPCfgType } from "gd-sprest/helper/types";
    export const SPCfgFieldType: ISPCfgFieldType;
    export const SPCfgType: ISPCfgType;
}

declare module 'gd-sprest/helper/types/app' {
    import { Types } from "gd-sprest/";
    export interface IApp {
        copyFileToHostWeb(srcFileUrl: string, dstFolder: Types.SP.IFolderResult, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{
            file: Types.SP.IFileResult;
            folder: Types.SP.IFolderResult;
        }>;
        copyFileToHostWeb(srcFileUrl: string, dstFolderUrl: string, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{
            file: Types.SP.IFileResult;
            folder: Types.SP.IFolderResult;
        }>;
        copyFilesToHostWeb(fileUrls: Array<string>, folderUrls: Array<string>, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{
            files: Array<Types.SP.IFileResult>;
            folders: Array<Types.SP.IFolderResult>;
        }>;
        createSubFolders(folder: Types.SP.IFolderResult, subFolderUrl: string): PromiseLike<Types.SP.IFolderResult>;
        getFolder(web: Types.SP.IWeb | Types.SP.IWebResult, folderUrl: string, createFl?: boolean): PromiseLike<Types.SP.IFolderResult>;
        removeEmptyFolders(web: Types.SP.IWebResult, folderUrls: Array<string>): PromiseLike<void>;
        removeFile(web: Types.SP.IWebResult, fileUrl: string): PromiseLike<void>;
        removeFiles(web: Types.SP.IWebResult, fileUrls: Array<string>): PromiseLike<void>;
    }
}

declare module 'gd-sprest/helper/types/dependencies' {
    export interface IDependencies {
        constructor(callback: (...args) => void): any;
        MAX_WAIT: number;
        pageContextExistsFl: boolean;
        SCRIPTS: Array<string>;
        loadDependencies(): any;
        waitForPageContext(): any;
    }
}

declare module 'gd-sprest/helper/types/fieldSchemaXML' {
    import { IFieldInfo } from "gd-sprest/helper/types";
    export interface IFieldSchemaXML {
        generate: (fieldInfo: IFieldInfo) => PromiseLike<string>;
    }
}

declare module 'gd-sprest/helper/types/jslink' {
    export interface IJSLink {
        _fieldToMethodMapper: any;
        _hideEventFl: boolean;
        disableEdit(ctx: any, field: any, requireValueFl?: boolean): string;
        disableQuickEdit(ctx: any, field: any): any;
        getListView(ctx: any): any;
        getListViewItems(ctx: any): any;
        getListViewSelectedItems(): any;
        getWebPart(ctx: any): any;
        hideField(ctx: any, field: any): any;
        removeField(ctx: any, field: any): any;
        renderField(ctx: any, field: any, formType?: number): any;
    }
}

declare module 'gd-sprest/helper/types/listForm' {
    import { Types } from "gd-sprest/";
    export interface IListForm {
        new (props: IListFormProps): PromiseLike<IListFormResult>;
        loadAttachments(listInfo: IListFormProps): PromiseLike<Array<Types.SP.IAttachment>>;
        refreshItem(listInfo: IListFormResult): PromiseLike<IListFormResult>;
        removeAttachments(listInfo: IListFormProps, attachmentInfo: Array<Types.SP.IAttachment>): PromiseLike<void>;
        saveAttachments(listInfo: IListFormProps, attachmentInfo: Array<IListFormAttachmentInfo>): PromiseLike<Array<Types.SP.IAttachment>>;
        saveItem(info: IListFormResult, formValues: any): PromiseLike<IListFormResult>;
    }
    export interface IListFormAttachmentInfo {
        data: any;
        name: string;
    }
    export interface IListFormCache {
        ct: string;
        fields: string;
        list: string;
    }
    export interface IListFormProps {
        cacheKey?: string;
        fields?: Array<string>;
        item?: Types.SP.IListItemQueryResult | Types.SP.IListItemResult;
        itemId?: number;
        listName: string;
        loadAttachments?: boolean;
        query?: Types.SP.ODataQuery;
        webUrl?: string;
    }
    export interface IListFormResult {
        attachments?: Array<Types.SP.IAttachment>;
        fields: {
            [key: string]: Types.SP.IFieldResult;
        };
        item?: Types.SP.IListItemQueryResult | Types.SP.IListItemResult;
        query?: Types.SP.ODataQuery;
        list: Types.SP.IListResult;
    }
}

declare module 'gd-sprest/helper/types/listFormField' {
    import { Types } from "gd-sprest/";
    import { ITermInfo } from "gd-sprest/helper/types";
    export interface IListFormFieldInfo {
        defaultValue?: any;
        field?: Types.SP.IFieldResult | Types.SP.IFieldQueryResult;
        listName: string;
        name: string;
        readOnly?: boolean;
        required?: boolean;
        title?: string;
        type?: number;
        typeAsString?: string;
        webUrl?: string;
    }
    export interface IListFormChoiceFieldInfo extends IListFormFieldInfo {
        choices?: Array<string>;
        field?: Types.SP.IFieldChoice | Types.SP.IFieldMultiChoice;
        multi?: boolean;
    }
    export interface IListFormDateFieldInfo extends IListFormFieldInfo {
        field?: Types.SP.IFieldDateTime;
        showTime?: boolean;
    }
    export interface IListFormLookupFieldInfo extends IListFormFieldInfo {
        field?: Types.SP.IFieldLookup;
        lookupField?: string;
        lookupListId?: string;
        lookupWebId?: string;
        multi?: boolean;
    }
    export interface IListFormMMSFieldInfo extends IListFormFieldInfo {
        field?: Types.SP.IFieldManagedMetadata;
        multi?: boolean;
        termId?: string;
        termSetId?: string;
        termStoreId?: string;
    }
    export interface IListFormNumberFieldInfo extends IListFormFieldInfo {
        field?: Types.SP.IFieldNumber | Types.SP.IFieldCurrency;
        maxValue?: number;
        minValue?: number;
        showAsPercentage?: boolean;
    }
    export interface IListFormTextFieldInfo extends IListFormFieldInfo {
        field?: Types.SP.IFieldText | Types.SP.IFieldNote;
        multiline?: boolean;
        richText?: boolean;
        rows?: number;
    }
    export interface IListFormUrlFieldInfo extends IListFormFieldInfo {
        field?: Types.SP.IFieldUrl;
    }
    export interface IListFormUserFieldInfo extends IListFormFieldInfo {
        allowGroups?: boolean;
        field?: Types.SP.IFieldUser;
        multi?: boolean;
    }
    export interface IListFormField {
        new (props: IListFormFieldInfo): PromiseLike<IListFormFieldInfo>;
        loadLookupData(info: IListFormLookupFieldInfo, queryTop?: number): PromiseLike<Array<Types.SP.IListItemQueryResult>>;
        loadMMSData(info: IListFormMMSFieldInfo): PromiseLike<Array<ITermInfo>>;
        loadMMSValueField(info: IListFormMMSFieldInfo): PromiseLike<Types.SP.IFieldManagedMetadata>;
    }
}

declare module 'gd-sprest/helper/types/loader' {
    export interface ILoader {
        loaded: boolean;
        waitForSPLibs(callback: any, timeout?: number, loadLibraries?: boolean): any;
    }
}

declare module 'gd-sprest/helper/types/spCfg' {
    import { Types } from "gd-sprest/";
    export interface IFieldInfo {
        defaultValue?: string;
        name: string;
        required?: boolean;
        schemaXml?: string;
        title?: string;
        type?: number;
    }
    export interface IFieldInfoCalculated extends IFieldInfo {
        fieldRefs?: Array<string>;
        format?: number;
        formula?: string;
        resultType?: string;
    }
    export interface IFieldInfoChoice extends IFieldInfo {
        choices?: string[];
        multi?: boolean;
    }
    export interface IFieldInfoDate extends IFieldInfo {
        format?: number;
    }
    export interface IFieldInfoLookup extends IFieldInfo {
        fieldRef?: string;
        multi?: boolean;
        listId?: string;
        listName?: string;
        showField?: string;
        webUrl?: string;
    }
    export interface IFieldInfoMMS extends IFieldInfo {
        locale?: number;
    }
    export interface IFieldInfoNote extends IFieldInfo {
        appendFl?: boolean;
        noteType?: number;
        numberOfLines?: number;
    }
    export interface IFieldInfoNumber extends IFieldInfo {
        decimals?: number;
        max?: number;
        min?: number;
        numberType?: number;
    }
    export interface IFieldInfoUser extends IFieldInfo {
        multi?: boolean;
        selectionMode?: number;
        selectionScope?: number;
    }
    export interface ISPCfgContentTypeInfo extends Types.SP.IContentTypeCreationInformation {
        ContentType?: Types.SP.IContentTypeResult;
        FieldRefs?: Array<string>;
        JSLink?: string;
        ParentName?: string;
        ParentWebUrl?: string;
        onCreated?: (ct: Types.SP.IContentTypeResult) => void;
        onUpdated?: (ct: Types.SP.IContentTypeResult) => void;
    }
    export interface ISPCfgCustomActionInfo {
        Site?: Array<Types.SP.IUserCustomActionCreationInformation>;
        Web?: Array<Types.SP.IUserCustomActionCreationInformation>;
    }
    export interface ISPCfgFieldInfo extends IFieldInfo {
        onCreated?: (field: Types.SP.IFieldResult) => void;
        onUpdated?: (field: Types.SP.IFieldResult) => void;
    }
    export interface ISPCfgListInfo {
        ContentTypes?: Array<ISPCfgContentTypeInfo>;
        CustomFields?: Array<ISPCfgFieldInfo>;
        ListInformation: Types.SP.IListCreationInformation;
        TitleFieldDisplayName?: string;
        UserCustomActions?: Array<Types.SP.IUserCustomActionCreationInformation>;
        ViewInformation?: Array<ISPCfgViewInfo>;
        onCreated?: (list: Types.SP.IListResult) => void;
        onUpdated?: (list: Types.SP.IListQueryResult) => void;
    }
    export interface ISPCfgViewInfo {
        JSLink?: string;
        ViewFields?: Array<string>;
        ViewName: string;
        ViewQuery?: string;
        onCreated?: (view: Types.SP.IViewResult) => void;
        onUpdated?: (view: Types.SP.IView) => void;
    }
    export interface ISPCfgWebPartInfo {
        FileName: string;
        Group?: string;
        XML: string;
        onCreated?: (file: Types.SP.IFileResult) => void;
        onUpdated?: (file: Types.SP.IFileResult) => void;
    }
    export interface ISPConfig {
        new (cfg: ISPConfigProps, webUrl?: string): any;
        install(callback?: () => void): any;
        installByType(cfgType: number, callback?: any, targetName?: string): any;
        uninstall(callback?: () => void): any;
        uninstallByType(cfgType: number, callback?: any, targetName?: string): any;
    }
    export interface ISPConfigProps {
        ContentTypes?: Array<ISPCfgContentTypeInfo>;
        CustomActionCfg?: ISPCfgCustomActionInfo;
        Fields?: Array<ISPCfgFieldInfo>;
        ListCfg?: Array<ISPCfgListInfo>;
        WebPartCfg?: Array<ISPCfgWebPartInfo>;
    }
    export interface ISPConfigTypes {
        Fields: number;
        ContentTypes: number;
        Lists: number;
        SiteUserCustomActions: number;
        WebUserCustomActions: number;
    }
}

declare module 'gd-sprest/helper/types/spCfgTypes' {
    export type ISPCfgFieldType = {
        Boolean: number;
        Calculated: number;
        Choice: number;
        Date: number;
        Lookup: number;
        MMS: number;
        Note: number;
        Number: number;
        Text: number;
        Url: number;
        User: number;
    };
    export type ISPCfgType = {
        Fields: number;
        ContentTypes: number;
        Lists: number;
        SiteUserCustomActions: number;
        WebParts: number;
        WebUserCustomActions: number;
    };
}

declare module 'gd-sprest/helper/types/taxonomy' {
    export interface ITaxonomy {
        findById(term: ITerm, termId: string): ITerm;
        findByName(term: ITerm, termName: string): ITerm;
        getTermsById(termStoreId: string, termSetId: string): PromiseLike<Array<ITermInfo>>;
        getTermSetById(termStoreId: string, termSetId: string): PromiseLike<ITerm>;
        getTermsFromDefaultSC(termSetName: string): PromiseLike<Array<ITermInfo>>;
        getTermSetFromDefaultSC(termSetName: string): PromiseLike<ITerm>;
        getTermsByGroupName(termSetName: string, groupName: string): PromiseLike<Array<ITermInfo>>;
        getTermSetByGroupName(termSetName: string, groupName: string): PromiseLike<ITerm>;
        toArray(term: ITerm | ITermInfo): Array<ITermInfo>;
        toFieldValue(term: ITerm | ITermInfo): any;
        toFieldMultiValue(terms: Array<ITerm | ITermInfo>): any;
        toObject(terms: Array<ITermInfo>): ITerm;
    }
    export interface ITerm {
        info: ITermInfo;
        parent?: ITerm;
    }
    export interface ITermInfo {
        description: string;
        id: string;
        name: string;
        parent?: ITerm;
        path: Array<string>;
        pathAsString: string;
        props: {
            [key: string]: string;
        };
    }
}

declare module 'gd-sprest/helper/types/webpart' {
    export interface IWebPart {
        new (props: IWebPartProps): any;
    }
    export interface IWebPartCfg {
        WebPartId?: string;
    }
    export interface IWebPartInfo {
        cfg: IWebPartCfg;
        el: HTMLElement;
        wpId: string;
    }
    export interface IWebPartProps {
        cfgElementId?: string;
        helpProps?: {
            title?: string;
            url: string;
        };
        onPostRender?: (wp: IWebPartInfo) => void;
        onRenderDisplay?: (wp: IWebPartInfo) => any;
        onRenderEdit?: (wp: IWebPartInfo) => any;
        elementId: string;
    }
}

declare module 'gd-sprest/mapper/audit' {
    export const audit: {
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/eventReceiver' {
    export const eventreceiver: {
        delete: {
            requestType: number;
        };
        update: {
            metadataType: string;
            name: string;
            requestMethod: string;
            requestType: number;
        };
    };
    export const eventreceivers: {
        add: {
            metadataType: string;
            name: string;
            requestType: number;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/file' {
    export const attachment: {};
    export const attachmentfiles: {
        add: {
            argNames: string[];
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const file: {
        properties: string[];
        approve: {
            argNames: string[];
            requestType: number;
        };
        cancelupload: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        checkin: {
            argNames: string[];
            requestType: number;
        };
        checkout: {
            requestType: number;
        };
        content: {
            name: string;
            requestType: number;
        };
        continueUpload: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        copyTo: {
            argNames: string[];
            requestType: number;
        };
        delete: {
            requestType: number;
        };
        deny: {
            argNames: string[];
            requestType: number;
        };
        finishUpload: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        getlimitedwebpartmanager: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        moveTo: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        openBinaryStream: {
            requestType: number;
        };
        publish: {
            argNames: string[];
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        recycle: {
            requestType: number;
        };
        saveBinaryStream: {
            requestType: number;
        };
        startUpload: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        undoCheckOut: {
            requestType: number;
        };
        unpublish: {
            argNames: string[];
            requestType: number;
        };
        update: {
            metadataType: string;
            name: string;
            requestMethod: string;
            requestType: number;
        };
    };
    export const files: {
        add: {
            argNames: string[];
            requestType: number;
        };
        addTemplateFile: {
            argNames: string[];
            requestType: number;
        };
        getByUrl: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const fileversion: {
        properties: any[];
        delete: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const fileversions: {
        delete: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const folder: {
        properties: string[];
        delete: {
            requestType: number;
        };
        getByUrl: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        recycle: {
            requestType: number;
        };
        update: {
            metadataType: string;
            name: string;
            requestMethod: string;
            requestType: number;
        };
    };
    export const folders: {
        properties: string[];
        add: {
            argNames: string[];
            requestType: number;
        };
        getbyurl: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const limitedwebpartmanager: {
        get_WebParts: {
            argNames: string[];
            name: string;
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/list' {
    export const contenttype: {
        properties: string[];
        delete: {
            requestType: number;
        };
        update: {
            metadataType: string;
            name: string;
            requestMethod: string;
            requestType: number;
        };
    };
    export const contenttypes: {
        add: {
            metadataType: string;
            name: string;
            requestType: number;
        };
        addAvailableContentType: {
            argNames: string[];
            requestType: number;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const field: {
        delete: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        setShowInDisplayForm: {
            argNames: string[];
            requestType: number;
        };
        setShowInEditForm: {
            argNames: string[];
            requestType: number;
        };
        setShowInNewForm: {
            argNames: string[];
            requestType: number;
        };
        update: {
            inheritMetadataType: boolean;
            name: string;
            requestMethod: string;
            requestType: number;
        };
    };
    export const fieldlinks: {
        add: {
            argNames: string[];
            metadataType: string;
            name: string;
            requestType: number;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const fields: {
        add: {
            metadataType: string;
            name: string;
            requestType: number;
        };
        addField: {
            argNames: string[];
            metadataType: string;
            name: string;
            requestType: number;
        };
        addDependentLookupField: {
            argNames: string[];
            requestType: number;
        };
        createFieldAsXml: {
            argNames: string[];
            requestType: number;
            data: {
                parameters: {
                    __metadata: {
                        type: string;
                    };
                    Options: number;
                    SchemaXml: string;
                };
            };
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getByInternalNameOrTitle: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getByTitle: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const items: {
        add: {
            metadataType: (obj: any) => any;
            name: string;
            requestType: number;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const list: {
        properties: string[];
        breakRoleInheritance: {
            argNames: string[];
            requestType: number;
        };
        delete: {
            requestType: number;
        };
        getChanges: {
            argNames: string[];
            metadataType: string;
            requestType: number;
        };
        getItemById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getItems: {
            argNames: string[];
            requestType: number;
            data: {
                query: {
                    __metadata: {
                        type: string;
                    };
                    ViewXml: string;
                };
            };
        };
        getItemsByQuery: {
            argNames: string[];
            name: string;
            requestType: number;
            data: {
                query: {
                    __metadata: {
                        type: string;
                    };
                    ViewXml: string;
                };
            };
        };
        getListItemChangesSinceToken: {
            argNames: string[];
            metadataType: string;
            requestType: number;
        };
        getRelatedFields: {
            requestType: number;
        };
        getUserEffectivePermissions: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        getViewById: {
            argNames: string[];
            name: string;
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        recycle: {
            requestType: number;
        };
        renderListData: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        renderListFormData: {
            argNames: string[];
            requestType: number;
        };
        reserveListItemId: {
            requestType: number;
        };
        resetRoleInheritance: {
            requestType: number;
        };
        update: {
            metadataType: string;
            name: string;
            requestMethod: string;
            requestType: number;
        };
    };
    export const listitem: {
        properties: string[];
        breakRoleInheritance: {
            argNames: string[];
            requestType: number;
        };
        delete: {
            requestType: number;
        };
        getUserEffectivePermissions: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        recycle: {
            requestType: number;
        };
        resetRoleInheritance: {
            requestType: number;
        };
        update: {
            inheritMetadataType: boolean;
            name: string;
            requestMethod: string;
            requestType: number;
        };
        validateUpdateListItem: {
            argNames: string[];
            requestType: number;
        };
    };
    export const lists: {
        add: {
            metadataType: string;
            name: string;
            requestType: number;
        };
        ensureSiteAssetsLibrary: {
            requestType: number;
        };
        ensureSitePagesLibrary: {
            requestType: number;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getByTitle: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const version: {
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        deleteAll: {
            requestType: number;
        };
        deleteById: {
            argNames: string[];
            requestType: number;
        };
        deleteByLabel: {
            argNames: string[];
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        restoreByLabel: {
            argNames: string[];
            requestType: number;
        };
    };
    export const view: {
        properties: string[];
        delete: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        renderAsHtml: {
            requestType: number;
        };
        update: {
            metadataType: string;
            name: string;
            requestMethod: string;
            requestType: number;
        };
    };
    export const viewfieldcollection: {
        addViewField: {
            argNames: string[];
            requestType: number;
        };
        moveViewFieldTo: {
            argNames: string[];
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        removeAllViewFields: {
            requestType: number;
        };
        removeViewField: {
            argNames: string[];
            requestType: number;
        };
    };
    export const views: {
        add: {
            metadataType: string;
            name: string;
            requestType: number;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getByTitle: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/navigation' {
    export const navigationservicerest: {
        properties: string[];
        getMenuState: {
            argNames: string[];
            name: string;
            RequestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/propertyValues' {
    export const propertyvalues: {
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/search' {
    export const search: {
        postquery: {
            argNames: string[];
            metadataType: string;
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/security' {
    export const roleassignment: {
        properties: string[];
        delete: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const roleassignments: {
        addRoleAssignment: {
            argNames: string[];
            requestType: number;
        };
        getByPrincipalId: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        removeRoleAssignment: {
            argNames: string[];
            requestType: number;
        };
    };
    export const roledefinition: {
        delete: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const roledefinitions: {
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getByName: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getByType: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/site' {
    export const site: {
        properties: string[];
        createPreviewSPSite: {
            argNames: string[];
            requestType: number;
        };
        extendUpgradeReminderDate: {
            requestType: number;
        };
        getCatalog: {
            argNames: string[];
            requestType: number;
        };
        getChanges: {
            argNames: string[];
            metadataType: string;
            requestType: number;
        };
        getCustomListTemplates: {
            argNames: string[];
            requestType: number;
        };
        getWebTemplates: {
            argNames: string[];
            requestType: number;
        };
        invalidate: {
            requestType: number;
        };
        needsUpgradeByType: {
            argNames: string[];
            requestType: number;
        };
        openWeb: {
            argNames: string[];
            requestType: number;
        };
        openWebById: {
            argNames: string[];
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        runHealthCheck: {
            argNames: string[];
            requestType: number;
        };
        runUpgradeSiteSession: {
            argNames: string[];
            requestType: number;
        };
        update: {
            metadataType: string;
            name: string;
            requestMethod: string;
            requestType: number;
        };
        updateClientObjectModelUseRemoteAPIsPermissionSetting: {
            argNames: string[];
            requestType: number;
        };
    };
    export const tenantapp: {
        deploy: {
            requestType: number;
        };
        install: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        remove: {
            requestType: number;
        };
        retract: {
            requestType: number;
        };
        upgrade: {
            requestType: number;
        };
        uninstall: {
            requestType: number;
        };
    };
    export const tenantapps: {
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const tenantappcatalog: {
        properties: string[];
        add: {
            argNames: string[];
            requestType: number;
        };
        getById: {
            argNames: string[];
            name: string;
            requestType: number;
            returnType: string;
        };
        SiteCollectionAppCatalogsSites: {
            requestType: number;
        };
    };
    export const utility: {
        createEmailBodyForInvitation: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        getAppLicenseDeploymentId: {
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        getAppLicenseInformation: {
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        getCurrentUserEmailAddresses: {
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        getLocalizedString: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        getLowerCaseString: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        importAppLicense: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        isUserLicensedForEntityInContext: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        localizeWebPartGallery: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        markDiscussionAsFeatured: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        resolvePrincipal: {
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        searchPrincipals: {
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        unmarkDiscussionAsFeatured: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
    };
    export const web: {
        properties: string[];
        applyTheme: {
            argNames: string[];
            requestType: number;
        };
        applyWebTemplate: {
            argName: string[];
            requestType: number;
        };
        breakRoleInheritance: {
            argNames: string[];
            requestType: number;
        };
        delete: {
            requestType: number;
        };
        doesPushNotificationSubscriberExist: {
            argNames: string[];
            requestType: number;
        };
        doesUserHavePermissions: {
            argNames: string[];
            requestType: number;
        };
        ensureUser: {
            argNames: string[];
            requestType: number;
        };
        executeRemoteLOB: {
            requestType: number;
        };
        getAppBdcCatalog: {
            requestType: number;
        };
        getAppBdcCatalogForAppInstance: {
            argNames: string[];
            requestType: number;
        };
        getAppInstanceById: {
            argNames: string[];
            requestType: number;
        };
        getAppInstancesByProductId: {
            argNames: string[];
            requestType: number;
        };
        getAvailableWebTemplates: {
            argNames: string[];
            requestType: number;
        };
        getCatalog: {
            argNames: string[];
            requestType: number;
        };
        getChanges: {
            argNames: string[];
            metadataType: string;
            requestType: number;
        };
        getContextWebInformation: {
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        getCustomListTemplates: {
            requestType: number;
        };
        getDocumentLibraries: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        getEntity: {
            argNames: string[];
            requestType: number;
        };
        getFileByServerRelativeUrl: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getFolderByServerRelativeUrl: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getList: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getPushNotificationSubscriber: {
            argNames: string[];
            requestType: number;
        };
        getPushNotificationSubscribersByArgs: {
            argNames: string[];
            requestType: number;
        };
        getPushNotificationSubscribersByUser: {
            argNames: string[];
            requestType: number;
        };
        getSubwebsFilteredForCurrentUser: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getUserById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getUserEffectivePermissions: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        getWebUrlFromPageUrl: {
            name: string;
            requestType: number;
        };
        loadAndInstallApp: {
            requestType: number;
        };
        loadAndInstallAppInSpecifiedLocale: {
            argNames: string[];
            requestType: number;
        };
        loadApp: {
            argNames: string[];
            requestType: number;
        };
        mapToIcon: {
            argNames: string[];
            requestType: number;
        };
        processExternalNotification: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        registerPushNotificationSubscriber: {
            argNames: string[];
            requestType: number;
        };
        resetRoleInheritance: {
            requestType: number;
        };
        unregisterPushNotificationSubscriber: {
            requestType: number;
        };
        update: {
            metadataType: string;
            name: string;
            requestMethod: string;
            requestType: number;
        };
    };
    export const webinfos: {
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const webs: {
        add: {
            argNames: string[];
            metadataType: string;
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/social' {
    export const peoplemanager: {
        amIFollowedBy: {
            argNames: string[];
            requestType: number;
        };
        amIFollowing: {
            argNames: string[];
            requestType: number;
        };
        follow: {
            argNames: string[];
            requestType: number;
        };
        followTag: {
            argNames: string[];
            requestType: number;
        };
        getFollowedTags: {
            argNames: string[];
            requestType: number;
        };
        getFollowersFor: {
            argNames: string[];
            requestType: number;
        };
        getMyFollowers: {
            requestType: number;
        };
        getMyProperties: {
            requestType: number;
        };
        getMySuggestions: {
            requestType: number;
        };
        getPeopleFollowedBy: {
            argNames: string[];
            requestType: number;
        };
        getPeopleFollowedByMe: {
            requestType: number;
        };
        getPropertiesFor: {
            argNames: string[];
            requestType: number;
        };
        getTrendingTags: {
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        getUserProfilePropertyFor: {
            argNames: string[];
            requestType: number;
        };
        hideSuggestion: {
            argNames: string[];
            requestType: number;
        };
        isFollowing: {
            argNames: string[];
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        setMyProfilePicture: {
            requestType: number;
        };
        stopFollowing: {
            argNames: string[];
            requestType: number;
        };
        stopFollowingTag: {
            argNames: string[];
            requestType: number;
        };
    };
    export const profileloader: {
        createPersonalSiteEnqueueBulk: {
            argNames: string[];
            requestType: number;
        };
        getOwnerUserProfile: {
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
            returnType: string;
        };
        getUserProfile: {
            requestType: number;
            returnType: string;
        };
    };
    export const socialfeed: {
        actor: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        actorFeed: {
            argNames: string[];
            name: string;
            requestType: number;
        };
        clearMyUnreadMentionCount: {
            name: string;
            requestType: number;
        };
        my: {
            name: string;
            requestType: number;
        };
        myFeed: {
            name: string;
            requestType: number;
        };
        myLikes: {
            name: string;
            requestType: number;
        };
        myMentionFeed: {
            name: string;
            requestType: number;
        };
        myNews: {
            name: string;
            requestType: number;
        };
        myTimelineFeed: {
            name: string;
            requestType: number;
        };
        myUnreadMentionCount: {
            name: string;
            requestType: number;
        };
    };
    export const userprofile: {
        properties: string[];
        createPersonalSiteEnque: {
            requestType: number;
        };
        shareAllSocialData: {
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/user' {
    export const group: {
        properties: string[];
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const sitegroups: {
        add: {
            metadataType: string;
            name: string;
            requestType: number;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getByName: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        removeById: {
            argNames: string[];
            requestType: number;
        };
        removeByLoginName: {
            argNames: string[];
            requestType: number;
        };
    };
    export const peoplepicker: {
        clientPeoplePickerResolveUser: {
            argNames: string[];
            metadataType: string;
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
        clientPeoplePickerSearchUser: {
            argNames: string[];
            metadataType: string;
            name: string;
            replaceEndpointFl: boolean;
            requestType: number;
        };
    };
    export const user: {
        properties: string[];
        delete: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const users: {
        add: {
            metadataType: string;
            name: string;
            requestType: number;
        };
        getByEmail: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        getByLoginName: {
            argNames: string[];
            name: string;
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
        removeById: {
            argNames: string[];
            requestType: number;
        };
        removeByLoginName: {
            argNames: string[];
            name: string;
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/userCustomAction' {
    export const usercustomaction: {
        delete: {
            requestType: number;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
    export const usercustomactions: {
        add: {
            metadataType: string;
            name: string;
            requestType: number;
        };
        clear: {
            requestType: number;
        };
        getById: {
            argNames: string[];
            requestType: number;
            returnType: string;
        };
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/types/attachment' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IAttachmentFiles } from "gd-sprest/mapper/types";
    export interface IAttachmentFilesMethods {
        add(fileName: any, content: any): IBase<IAttachment>;
        next(): IBase<IAttachmentFiles>;
    }
    export interface IAttachment {
        FileName: string;
        FileNameAsPath: Types.SP.IResourcePath;
        ServerRelativePath: Types.SP.IResourcePath;
        ServerRelativeUrl: string;
    }
}

declare module 'gd-sprest/mapper/types/attachments' {
    import { IBaseCollection } from "gd-sprest/utils/types";
    import { IAttachment, IAttachmentFilesMethods } from "gd-sprest/mapper/types";
    export interface IAttachmentFiles extends IAttachmentFilesMethods, IBaseCollection<IAttachment> {
    }
}

declare module 'gd-sprest/mapper/types/audit' {
    export interface IAudit {
        AuditFlags: number;
    }
}

declare module 'gd-sprest/mapper/types/complexTypes' {
    import { Types } from "gd-sprest/";
    export interface AppLicense {
        RawXMLLicenseToken: string;
    }
    export interface AppLicenseCollection {
        Items: AppLicense;
    }
    export interface AppProperties {
        AppSettingsEnabled: boolean;
        Description: string;
        EulaUrl: string;
        IsAnonymous: boolean;
        IsDisabled: boolean;
        ManagedDeploymentEnabled: boolean;
        ManagePermissionsEnabled: boolean;
        ManageSeatsEnabled: boolean;
        MonitoringEnabled: boolean;
        Publisher: string;
        RemoveEnabled: boolean;
        SideLoadEnabled: boolean;
        SupportUrl: string;
        ViewInMarketPlaceEnabled: boolean;
    }
    export interface AppSiteContext {
        SiteUrl: string;
    }
    export interface AppViewCreationInfo {
        AppId: string;
        Title: string;
    }
    export interface AttachmentCreationInformation {
        FileName: string;
    }
    export interface BasePermissions {
        High: number;
        Low: number;
    }
    export interface CamlQuery {
        DatesInUtc: boolean;
        FolderServerRelativeUrl: string;
        ListItemCollectionPosition: ListItemCollectionPosition;
        ViewXml: string;
    }
    export interface ChangeLogItemQuery {
        ChangeToken: string;
        Contains: string;
        Query: string;
        QueryOptions: string;
        RowLimit: string;
        ViewFields: string;
        ViewName: string;
    }
    export interface ChangeQuery {
        Activity: boolean;
        Add: boolean;
        Alert: boolean;
        ChangeTokenEnd: ChangeToken;
        ChangeTokenStart: ChangeToken;
        ContentType: boolean;
        DeleteObject: boolean;
        FetchLimit: number;
        Field: boolean;
        File: boolean;
        Folder: boolean;
        Group: boolean;
        GroupMembershipAdd: boolean;
        GroupMembershipDelete: boolean;
        Item: boolean;
        LatestFirst: boolean;
        List: boolean;
        Move: boolean;
        Navigation: boolean;
        RecursiveAll: boolean;
        Rename: boolean;
        RequireSecurityTrim: boolean;
        Restore: boolean;
        RoleAssignmentAdd: boolean;
        RoleAssignmentDelete: boolean;
        RoleDefinitionAdd: boolean;
        RoleDefinitionDelete: boolean;
        RoleDefinitionUpdate: boolean;
        SecurityPolicy: boolean;
        Site: boolean;
        SystemUpdate: boolean;
        Update: boolean;
        User: boolean;
        View: boolean;
        Web: boolean;
    }
    export interface ChangeToken {
        StringValue: string;
    }
    export interface ContentTypeCreationInformation {
        Description?: string;
        Group?: string;
        Id?: string;
        Name: string;
    }
    export interface ContentTypeId {
        StringValue: string;
    }
    export interface ContextWebInformation {
        FormDigestTimeoutSeconds: number;
        FormDigestValue: string;
        LibraryVersion: string;
        SiteFullUrl: string;
        SupportedSchemaVersions: String;
        WebFullUrl: string;
    }
    export interface CopyJobProgress {
        JobState: number;
        Logs: String;
    }
    export interface CopyMigrationInfo {
        EncryptionKey: any;
        JobId: string;
        JobQueueUri: string;
    }
    export interface CopyMigrationOptions {
        IgnoreVersionHistory: boolean;
    }
    export interface CreatableItemInfo {
        DocumentTemplate: number;
        FileExtension: string;
        ItemType: string;
    }
    export interface CreatableItemInfoCollection {
        Items: CreatableItemInfo;
    }
    export interface CustomActionElement {
        CommandUIExtension: string;
        EnabledScript: string;
        ImageUrl: string;
        Location: string;
        RegistrationId: string;
        RegistrationType: number;
        RequireSiteAdministrator: boolean;
        Rights: BasePermissions;
        Title: string;
        UrlAction: string;
    }
    export interface CustomActionElementCollection {
        Items: CustomActionElement;
    }
    export interface CustomResult {
        GroupTemplateId: string;
        ItemTemplateId: string;
        Properties: KeyValue;
        ResultTitle: string;
        ResultTitleUrl: string;
        Table: SimpleDataTable;
        TableType: string;
    }
    export interface DocumentLibraryInformation {
        AbsoluteUrl: string;
        Modified: string;
        ModifiedFriendlyDisplay: string;
        ServerRelativeUrl: string;
        Title: string;
    }
    export interface EncryptionOption {
        AES256CBCKey: any;
    }
    export interface EventReceiverDefinitionCreationInformation {
        EventType: number;
        ReceiverAssembly?: string;
        ReceiverClass?: string;
        ReceiverName: string;
        ReceiverUrl?: string;
        SequenceNumber?: number;
        Synchronization?: number;
    }
    export interface FieldAttachmentFile {
        FileName: string;
        FileNameAsPath: ResourcePath;
        ServerRelativePath: ResourcePath;
        ServerRelativeUrl: string;
    }
    export interface FieldAttachmentFiles {
        results: Array<FieldAttachmentFile>;
    }
    export interface FieldCalculationErrorValue {
        ErrorMessage: string;
    }
    export interface FieldCreationInformation {
        Choices?: {
            results: Array<string>;
        };
        FieldTypeKind: number;
        IsCompactName?: boolean;
        LookupFieldName?: string;
        LookupListId?: any;
        LookupWebId?: any;
        Required?: boolean;
        Title: string;
    }
    export interface FieldGeolocationValue {
        __metadata?: {
            type: string;
        };
        Altitude: number;
        Latitude: number;
        Longitude: number;
        Measure: number;
    }
    export interface FieldLookupValue {
        __metadata?: {
            type: string;
        };
        LookupId: number;
        LookupValue: string;
    }
    export interface FieldManagedMetadataValue {
        __metadata?: {
            type: string;
        };
        Label: string;
        TermGuid: string;
        WssId: number;
    }
    export interface FieldMultiChoiceValue {
        __metadata?: {
            type: string;
        };
        results: Array<string>;
    }
    export interface FieldMultiLookupValue {
        __metadata?: {
            type: string;
        };
        results: Array<FieldLookupValue>;
    }
    export interface FieldMultiUserValue extends Types.SP.IResults<FieldUserValue> {
    }
    export interface FieldRatingScaleQuestionAnswer {
        __metadata?: {
            type: string;
        };
        Answer: number;
        Question: string;
    }
    export interface FieldUrlValue {
        __metadata?: {
            type: string;
        };
        Description: string;
        Url: string;
    }
    export interface FieldUserValue {
        __metadata?: {
            type: string;
        };
        ContentTypeDisp?: string;
        Created?: string;
        Department?: string;
        EMail?: string;
        FirstName?: string;
        ID?: number;
        ImnName?: string;
        JobTitle?: string;
        LastName?: string;
        MobilePhone?: string;
        Modified?: string;
        NameWithPicture?: string;
        NameWithPictureAndDetails?: string;
        Office?: string;
        SipAddress?: string;
        Title?: string;
        UserName?: string;
        WorkPhone?: string;
    }
    export interface FileCollectionAddParameters {
        Overwrite: boolean;
    }
    export interface FileCreationInformation {
        Content: any;
        Overwrite: boolean;
        Url: string;
    }
    export interface FolderCollectionAddParameters {
        Overwrite: boolean;
    }
    export interface GroupCreationInformation {
        Description?: string;
        Title: string;
    }
    export interface Hashtag {
        Actor: string;
        Application: string;
        Label: string;
        Timestamp: string;
    }
    export interface IngestionTaskKey {
        IngestionTableAccountKey: string;
        IngestionTableAccountName: string;
        JobId: string;
        TaskId: string;
        TenantName: string;
    }
    export interface KeyValue {
        Key: string;
        Value: string;
        ValueType: string;
    }
    export interface Language {
        DisplayName: string;
        LanguageTag: string;
        Lcid: number;
    }
    export interface ListCreationInformation {
        BaseTemplate: number;
        CustomSchemaXml?: string;
        DataSourceProperties?: KeyValue;
        Description?: string;
        DocumentTemplateType?: number;
        QuickLaunchOption?: number;
        TemplateFeatureId?: string;
        Title: string;
    }
    export interface ListDataSource {
        Properties: KeyValue;
    }
    export interface ListDataValidationExceptionValue {
        FieldFailures: ListDataValidationFailure;
        ItemFailures: ListDataValidationFailure;
    }
    export interface ListDataValidationFailure {
        DisplayName: string;
        Message: string;
        Name: string;
        Reason: number;
        ValidationType: number;
    }
    export interface ListItemCollectionPosition {
        PagingInfo: string;
    }
    export interface ListItemCreationInformation {
        FolderUrl: string;
        LeafName: string;
        UnderlyingObjectType: number;
    }
    export interface ListItemFormUpdateValue {
        ErrorMessage: string;
        FieldName: string;
        FieldValue: string;
        HasException: boolean;
    }
    export interface MenuNode {
        CustomProperties: KeyValue;
        FriendlyUrlSegment: string;
        IsDeleted: boolean;
        IsHidden: boolean;
        Key: any;
        string: any;
        Nodes: MenuNode;
        NodeType: number;
        SimpleUrl: string;
        Title: string;
    }
    export interface MenuState {
        FriendlyUrlPrefix: string;
        Nodes: MenuNode;
        SimpleUrl: string;
        SPSitePrefix: string;
        SPWebPrefix: string;
        StartingNodeKey: string;
        StartingNodeTitle: string;
        Version: string;
    }
    export interface MethodInformation {
        IsBeta: boolean;
        Name: string;
        Parameters: ParameterInformation;
        ReturnTypeFullName: string;
    }
    export interface NavigationNodeCreationInformation {
        AsLastNode: boolean;
        IsExternal: boolean;
        Title: string;
        Url: string;
    }
    export interface ParameterInformation {
        Name: string;
        ParameterTypeFullName: string;
    }
    export interface PersonalResultSuggestion {
        HighlightedTitle: string;
        IsBestBet?: boolean;
        Title: string;
        Url: string;
    }
    export interface PropertyInformation {
        ExcludeFromDefaultRetrieval: boolean;
        IsBeta: boolean;
        Name: string;
        PropertyTypeFullName: string;
        ReadOnly: boolean;
    }
    export interface ProvisionedMigrationContainersInfo {
        DataContainerUri: string;
        EncryptionKey: any;
        MetadataContainerUri: string;
    }
    export interface ProvisionedMigrationQueueInfo {
        JobQueueUri: string;
    }
    export interface QueryProperty {
        Name: string;
        Value: QueryPropertyValue;
    }
    export interface QueryPropertyValue {
        BoolVal?: boolean;
        IntVal?: number;
        QueryPropertyValueTypeIndex?: number;
        StrArray?: String;
        StrVal?: string;
    }
    export interface QueryResult {
        CustomResults: CustomResult;
        QueryId: string;
        QueryRuleId?: string;
        RefinementResults: RefinementResults;
        RelevantResults: RelevantResults;
        SpecialTermResults: SpecialTermResults;
    }
    export interface QuerySuggestionQuery {
        IsPersonal?: boolean;
        Query: string;
    }
    export interface QuerySuggestionRange {
        Length?: number;
        Start?: number;
    }
    export interface QuerySuggestionResults {
        PeopleNames: String;
        PersonalResults: PersonalResultSuggestion;
        Queries: QuerySuggestionQuery;
    }
    export interface RecycleBinQueueInformation {
        IsAscending: boolean;
        ItemState: number;
        OrderBy: number;
        PagingInfo: string;
        RowLimit: number;
        ShowOnlyMyItems: boolean;
    }
    export interface RefinementResults {
        GroupTemplateId: string;
        ItemTemplateId: string;
        Property: KeyValue;
        Refiners: Refiner;
        ResultTitle: string;
        ResultTitleUrl: string;
    }
    export interface Refiner {
        Entries: RefinerEntry;
        Name: string;
    }
    export interface RefinerEntry {
        RefinementCount?: number;
        RefinementName: string;
        RefinementToken: string;
        RefinementValue: string;
    }
    export interface RelevantResults {
        GroupTemplateId: string;
        ItemTemplateId: string;
        Properties: KeyValue;
        ResultTitle: string;
        ResultTitleUrl: string;
        RowCount: number;
        Table: SimpleDataTable;
        TotalRows: number;
        TotalRowsIncludingDuplicates: number;
    }
    export interface ReorderingRule {
        Boost?: number;
        MatchType?: number;
        MatchValue: string;
    }
    export interface ReorderingRulesCreationInformation {
        Boost?: number;
        MatchType?: number;
        MatchValue: string;
    }
    export interface RelatedItem {
        IconUrl: string;
        ItemId: number;
        ListId: string;
        Title: string;
        Url: string;
        WebId: string;
    }
    export interface RenderListContextMenuDataParameters {
        CascDelWarnMessage: string;
        CustomAction: string;
        Field: string;
        ID: string;
        InplaceFullListSearch: string;
        InplaceSearchQuery: string;
        IsCSR: string;
        IsXslView: string;
        ItemId: string;
        ListViewPageUrl: string;
        OverrideScope: string;
        RootFolder: string;
        View: string;
        ViewCount: string;
    }
    export interface RenderListDataOverrideParameters {
        CascDelWarnMessage: string;
        CustomAction: string;
        DrillDown: string;
        Field: string;
        FieldInternalName: string;
        Filter: string;
        FilterData: string;
        FilterData1: string;
        FilterData2: string;
        FilterData3: string;
        FilterData4: string;
        FilterData5: string;
        FilterData6: string;
        FilterData7: string;
        FilterData8: string;
        FilterData9: string;
        FilterData10: string;
        FilterField: string;
        FilterField1: string;
        FilterField2: string;
        FilterField3: string;
        FilterField4: string;
        FilterField5: string;
        FilterField6: string;
        FilterField7: string;
        FilterField8: string;
        FilterField9: string;
        FilterField10: string;
        FilterFields: string;
        FilterFields1: string;
        FilterFields2: string;
        FilterFields3: string;
        FilterFields4: string;
        FilterFields5: string;
        FilterFields6: string;
        FilterFields7: string;
        FilterFields8: string;
        FilterFields9: string;
        FilterFields10: string;
        FilterLookupId: string;
        FilterLookupId1: string;
        FilterLookupId2: string;
        FilterLookupId3: string;
        FilterLookupId4: string;
        FilterLookupId5: string;
        FilterLookupId6: string;
        FilterLookupId7: string;
        FilterLookupId8: string;
        FilterLookupId9: string;
        FilterLookupId10: string;
        FilterOp: string;
        FilterOp1: string;
        FilterOp2: string;
        FilterOp3: string;
        FilterOp4: string;
        FilterOp5: string;
        FilterOp6: string;
        FilterOp7: string;
        FilterOp8: string;
        FilterOp9: string;
        FilterOp10: string;
        FilterValue: string;
        FilterValue1: string;
        FilterValue2: string;
        FilterValue3: string;
        FilterValue4: string;
        FilterValue5: string;
        FilterValue6: string;
        FilterValue7: string;
        FilterValue8: string;
        FilterValue9: string;
        FilterValue10: string;
        FilterValues: string;
        FilterValues1: string;
        FilterValues2: string;
        FilterValues3: string;
        FilterValues4: string;
        FilterValues5: string;
        FilterValues6: string;
        FilterValues7: string;
        FilterValues8: string;
        FilterValues9: string;
        FilterValues10: string;
        GroupString: string;
        HasOverrideSelectCommand: string;
        ID: string;
        InplaceFullListSearch: string;
        InplaceSearchQuery: string;
        IsCSR: string;
        IsGroupRender: string;
        IsXslView: string;
        ListViewPageUrl: string;
        OverrideScope: string;
        OverrideSelectCommand: string;
        PageFirstRow: string;
        PageLastRow: string;
        RootFolder: string;
        SortDir: string;
        SortDir1: string;
        SortDir2: string;
        SortDir3: string;
        SortDir4: string;
        SortDir5: string;
        SortDir6: string;
        SortDir7: string;
        SortDir8: string;
        SortDir9: string;
        SortDir10: string;
        SortField: string;
        SortField1: string;
        SortField2: string;
        SortField3: string;
        SortField4: string;
        SortField5: string;
        SortField6: string;
        SortField7: string;
        SortField8: string;
        SortField9: string;
        SortField10: string;
        SortFields: string;
        SortFieldValues: string;
        View: string;
        ViewCount: string;
        ViewId: string;
        WebPartId: string;
    }
    export interface RenderListDataParameters {
        AllowMultipleValueFilterForTaxonomyFields: boolean;
        DatesInUtc: boolean;
        ExpandGroups: boolean;
        FirstGroupOnly: boolean;
        FolderServerRelativeUrl: string;
        OverrideViewXml: string;
        Paging: string;
        RenderingOptions: number;
        ViewXml: string;
    }
    export interface RenderListFilterDataParameters {
        ExcludeFieldFilteringHtml: boolean;
        FieldInternalName: string;
        OverrideScope: string;
        ProcessQStringToCAML: string;
        ViewId: string;
    }
    export interface ResourcePath {
        DecodedUrl: string;
    }
    export interface RoleDefinitionCreationInformation {
        BasePermissions: BasePermissions;
        Description: string;
        Name: string;
        Order: number;
    }
    export interface SearchRequest {
        BlockDedupeMode?: number;
        BypassResultTypes?: boolean;
        ClientType?: string;
        CollapseSpecification?: string;
        Culture?: number;
        DesiredSnippetLength?: number;
        EnableFql?: boolean;
        EnableInterleaving?: boolean;
        EnableNicknames?: boolean;
        EnablePhonetic?: boolean;
        EnableOrderingHitHighlightedProperty?: boolean;
        EnableQueryRules?: boolean;
        EnableSorting?: boolean;
        EnableStemming?: boolean;
        GenerateBlockRankLog?: boolean;
        HiddenConstraints?: string;
        HitHighlightedMultivaluePropertyLimit?: number;
        HithighlightedProperties?: Types.SP.Results.String;
        MaxSnippetLength?: number;
        QLSQuerySession?: string;
        PersonalizationData?: string;
        ProcessBestBets?: boolean;
        ProcessPersonalFavorites?: boolean;
        Properties?: KeyValue;
        QueryTag?: string;
        QueryTemplate?: string;
        QueryTemplatePropertiesUrl?: string;
        Querytext: string;
        RankingModelId?: string;
        RefinementFilters?: Types.SP.Results.String;
        Refiners?: string;
        ReorderingRules?: Array<ReorderingRulesCreationInformation>;
        ResultsUrl?: string;
        RowLimit?: number;
        RowsPerPage?: number;
        SelectProperties?: Types.SP.Results.String;
        SortList?: Types.SP.Results.Object;
        SourceId?: string;
        StartRow?: number;
        SummaryLength?: number;
        Timeout?: number;
        TimeZoneId?: number;
        TotalRowsExactMinimum?: number;
        TrimDuplicates?: boolean;
        TrimDuplicatesIncludeId?: boolean;
        UIlanguage?: number;
        UseOLSQuery?: number;
    }
    export interface SearchResult {
        ElapsedTime?: number;
        PrimaryQueryResult: QueryResult;
        Properties: KeyValue;
        SecondaryQueryResults: QueryResult;
        SpellingSuggestion: string;
        TriggeredRules?: String;
    }
    export interface SearchSuggestion {
        ClientType?: string;
        Culture?: number;
        EnableStemming?: boolean;
        EnableQueryRules?: boolean;
        fCapitalizeFirstLetters?: boolean;
        fHitHighlighting?: boolean;
        fPrefixMatchAllTerms?: boolean;
        fPreQuerySuggestions?: boolean;
        iNumberOfQuerySuggestions?: number;
        iNumberOfResultSuggestions?: number;
        OLSQuerySession?: string;
        Querytext: string;
        ShowPeopleNameSuggestions?: boolean;
        SourceId?: string;
        UseOLSQuery?: boolean;
    }
    export interface SharedWithUser {
        Email: string;
        Name: string;
    }
    export interface SharedWithUserCollection {
        Items: SharedWithUser;
    }
    export interface SharingLinkInfo {
        Expiration: string;
        IsActive: boolean;
        LinkKind: number;
        Url: string;
    }
    export interface SimpleDataRow {
        Cells: Types.SP.Results.DataRow;
    }
    export interface SimpleDataTable {
        Rows: KeyValue;
    }
    export interface SocialActor {
        AccountName: string;
        ActorType?: number;
        CanFollow?: boolean;
        ContentUri: string;
        EmailAddress: string;
        FollowedContentUri: string;
        Id: string;
        ImageUri: string;
        IsFollowed?: boolean;
        LibraryUri: string;
        Name: string;
        PersonSiteUri: string;
        Status?: number;
        StatusText: string;
        TagGuid?: string;
        Title: string;
        Uri: string;
    }
    export interface SocialAttachment {
        AttachmentKind?: number;
        ClickAction: SocialAttachmentAction;
        ContentUri: string;
        Description: string;
        Height?: number;
        Length?: number;
        Name: string;
        PreviewHeight?: number;
        PreviewUri: string;
        PreviewWidth?: number;
        Uri: string;
        Width?: number;
    }
    export interface SocialAttachmentAction {
        ActionKind?: number;
        ActionUri: string;
        Height?: number;
        Width?: number;
    }
    export interface SocialDataItem {
        AccountName?: string;
        ItemType?: string;
        Text: string;
        Uri: string;
    }
    export interface SocialDataOverlay {
        ActorIndexes?: Number;
        Index?: number;
        Length?: number;
        LinkUri: string;
        OverlayType?: number;
    }
    export interface SocialExceptionDetails {
        InternalErrorCode?: number;
        InternalMessage: string;
        InternalStackTrace: string;
        InternalTypeName: string;
        Status?: number;
    }
    export interface SocialFeedOptions {
        MaxThreadCount?: number;
        NewerThan?: string;
        OlderThan?: string;
        SortOrder?: number;
    }
    export interface SocialFeed {
        Attributes?: number;
        NewestProcessed?: string;
        OldestProcessed?: string;
        Threads: SocialThread;
        UnreadMentionCount?: number;
    }
    export interface SocialFeedManager {
        Owner: SocialActor;
        PersonalSitePortalUri?: string;
    }
    export interface SocialFollowingManager {
        FollowedDocumentsUri?: string;
        FollowedSitesUri: string;
    }
    export interface SocialLink {
        Text: string;
        Uri: string;
    }
    export interface SocialPost {
        Attachment: SocialAttachment;
        Attributes?: number;
        AuthorIndex?: number;
        CreatedTime?: string;
        Id?: string;
        LikerInfo?: SocialPostActorInfo;
        ModifiedTime?: string;
        Overlays: SocialDataOverlay;
        PostType?: number;
        PreferredImageUri: string;
        Source: SocialLink;
        Text: string;
    }
    export interface SocialPostActorInfo {
        IncludesCurrentUser?: boolean;
        Indexes?: Number;
        TotalCount?: number;
    }
    export interface SocialPostCreationData {
        Attachment?: SocialAttachment;
        ContentItems?: SocialDataItem;
        ContentText: string;
        DefinitionData?: SocialPostDefinitionData;
        SecurityUris?: String;
        Source?: SocialLink;
        UpdateStatusText?: boolean;
    }
    export interface SocialPostDefinitionData {
        Items: SocialPostDefinitionDataItem;
        Name: string;
    }
    export interface SocialPostDefinitionDataItem {
        AccountName: string;
        ItemType?: number;
        PlaceholderName: string;
        TagGuid?: string;
        Text: string;
        Uri: string;
    }
    export interface SocialPostReference {
        Digest: SocialThread;
        Post: SocialPost;
        ThreadId: string;
        ThreadOwnerIndex?: number;
    }
    export interface SocialRestFollowingManager {
        FollowedDocumentsUri?: string;
        FollowedSitesUri: string;
        MyFollowedDocumentsUri: string;
        MyFollowedSitesUri: string;
        SocialActor: SocialActor;
    }
    export interface SocialRestPostCreationData {
        ID: string;
        creationData: SocialPostCreationData;
    }
    export interface SocialThread {
        Actors: SocialActor;
        Attributes?: number;
        Id: string;
        OwnerIndex?: number;
        PermaLink: string;
        PostReference: SocialPostReference;
        Replies: SocialPost;
        RootPost: SocialPost;
        Status?: number;
        ThreadType?: number;
        TotalReplyCount?: number;
    }
    export interface Sort {
        Direction?: number;
        Property: string;
    }
    export interface SPInvitationCreationResult {
        Email: string;
        InvitationLink: string;
        Lcid: number;
    }
    export interface SpecialTermResult {
        Description: string;
        IsVisualBestBet?: boolean;
        PiSearchResultId: string;
        RenderTemplateId: string;
        Title: string;
        Url: string;
    }
    export interface SpecialTermResults {
        GroupTemplateId: string;
        ItemTemplateId: string;
        Properties: KeyValue;
        ResultTitle: string;
        ResultTitleUrl: string;
    }
    export interface StringCollection {
        Id4a81de82eeb94d6080ea5bf63e27023a?: string;
        Items: String;
    }
    export interface SubwebQuery {
        ConfigurationFilter: number;
        WebTemplateFilter: number;
    }
    export interface TenantAppInformation {
        AppPrincipalId: string;
        AppWebFullUrl: string;
        CreationTime: string;
        IconAbsoluteUrl: string;
        IconFallbackAbsoluteUrl: string;
        Id: string;
        LaunchUrl: string;
        PackageFingerprint: any;
        ProductId: string;
        RemoteAppUrl: string;
        Status: number;
        Title: string;
    }
    export interface TimeZoneInformation {
        Bias: number;
        DaylightBias: number;
        StandardBias: number;
    }
    export interface UpgradeInfo {
        ErrorFile: string;
        Errors: number;
        LastUpdated: string;
        LogFile: string;
        RequestDate: string;
        RetryCount: number;
        StartTime: string;
        Status: number;
        UpgradeType: number;
        Warnings: number;
    }
    export interface UsageInfo {
        Bandwidth: number;
        DiscussionStorage: number;
        Hits: number;
        Storage: number;
        StoragePercentageUsed: number;
        Visits: number;
    }
    export interface UserCreationInformation {
        Email?: string;
        LoginName: string;
        Title?: string;
    }
    export interface UserCustomActionCreationInformation {
        CommandUIExtension?: string;
        Description?: string;
        Group?: string;
        ImageUrl?: string;
        Location?: string;
        Name: string;
        RegistrationId?: string;
        RegistrationType?: number;
        Rights?: any;
        ScriptBlock?: string;
        ScriptSrc?: string;
        Sequence?: number;
        Title?: string;
        Url?: string;
    }
    export interface UserIdInfo {
        NameId: string;
        NameIdIssuer: string;
    }
    export interface ViewCreationInformation {
        JSLink?: string;
        Paged?: boolean;
        PersonalView?: boolean;
        RowLimit?: number;
        SetAsDefaultView?: boolean;
        Title: string;
        ViewQuery?: string;
        ViewTypeKind?: number;
    }
    export interface Visualization {
        DefaultScreen: VisualizationStyleSet;
        DetailView: VisualizationStyleSet;
        MediumScreen: VisualizationStyleSet;
        SmallScreen: VisualizationStyleSet;
        VisualizationAppInfo: VisualizationAppInfo;
        VisualizationType: number;
    }
    export interface VisualizationAppInfo {
        DesignUri: string;
        Id: string;
        RuntimeUri: string;
    }
    export interface VisualizationField {
        InternalName: string;
        Style: string;
    }
    export interface VisualizationStyleSet {
        AspectRatio: string;
        BackgroundColor: string;
        Fields: VisualizationField;
        MinHeight: string;
    }
    export interface WebCreationInformation {
        Description?: string;
        Language?: number;
        Title: string;
        Url: string;
        UseSamePermissionsAsParentSite?: boolean;
        WebTemplate: string;
    }
    export interface WebInfoCreationInformation {
        Description?: string;
        Language?: number;
        Title: string;
        Url: string;
        UseUniquePermissions?: boolean;
        WebTemplate: string;
    }
    export interface WebRequestInfo {
        Body: string;
        Headers: KeyValue;
        StatusCode: number;
    }
    export interface WebResponseInfo {
        Body: string;
        Headers: KeyValue;
        StatusCode: number;
    }
    export interface XmlSchemaFieldCreationInformation {
        Options: number;
        SchemaXml: string;
    }
}

declare module 'gd-sprest/mapper/types/contentType' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IFieldResult, IFields, IFieldLink, IFieldLinks, IListResult } from "gd-sprest/mapper/types";
    export interface IContentTypeCreationInformation {
        Description?: string;
        Group?: string;
        Id?: string;
        Name: string;
    }
    export interface IContentTypeMethods {
        delete(): IBase;
        update(data: any): IBase;
    }
    export interface IContentTypeProps {
        Description: string;
        DisplayFormTemplateName: string;
        DisplayFormUrl: string;
        DocumentTemplate: string;
        DocumentTemplateUrl: string;
        EditFormTemplateName: string;
        EditFormUrl: string;
        Group: string;
        Hidden: boolean;
        Id: Types.SP.IStringValue;
        JSlink: string;
        MobileDisplayFormUrl: string;
        MobileEditFormUrl: string;
        MobileNewFormUrl: string;
        Name: string;
        NewFormTemplateName: string;
        NewFormUrl: string;
        Readonly: boolean;
        SchemaXml: string;
        SchemaXmlWithResourceTokens: string;
        Scope: string;
        Sealed: boolean;
        StringId: string;
    }
    export interface IContentTypeQueryProps {
        DescriptionResource(): IBase;
        FieldLinks(): IFieldLinks;
        FieldLinks(guid: string): IBase<IFieldLink>;
        Fields(): IFields;
        Fields(internalNameOrTitle: string): IFields;
        NameResource(): IBase;
        Parent(): IContentTypeMethods;
        WorkflowAssociations(): IBase;
    }
    export interface IContentTypeQueryResult extends IContentTypeMethods, IContentTypeProps {
        DescriptionResource: Types.SP.IResourcePath;
        FieldLinks: Types.SP.IResults<IFieldLink>;
        Fields: Types.SP.IResults<IFieldResult>;
        NameResource: Types.SP.IResourcePath;
        Parent: IListResult | Types.SP.IWebResult;
        WorkflowAssociations: Types.SP.IResults<any>;
    }
    export interface IContentTypeResult extends IContentTypeMethods, IContentTypeProps, IContentTypeQueryProps, IBase<IContentType, IContentTypeResult, IContentTypeQueryResult> {
    }
    export interface IContentType extends IContentTypeMethods, IContentTypeQueryProps, IBase<IContentType, IContentTypeResult, IContentTypeQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/contentTypes' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IContentType, IContentTypeCreationInformation, IContentTypeQueryResult, IContentTypeResult } from "gd-sprest/mapper/types";
    export interface IContentTypesMethods {
        add(parameters: IContentTypeCreationInformation): IBase<IContentType, IContentTypeResult>;
        addAvailableContentType(contentTypeId: any): IBase<IContentType, IContentTypeResult>;
        getById(id: any): IContentType & IBase<IContentType, IContentTypeResult, IContentTypeQueryResult>;
        next(): IBase<IContentTypes, IContentTypeResults>;
    }
    export interface IContentTypes extends IContentTypesMethods, IBaseCollection<IContentType, IContentTypeResult, IContentTypeQueryResult> {
    }
    export interface IContentTypeResults extends IContentTypesMethods, IBaseCollection<IContentTypeResult, IContentTypeResult, IContentTypeQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/eventReceiver' {
    import { IBase } from "gd-sprest/utils/types";
    export interface IEventReceiverDefinitionCreationInformation {
        EventType: number;
        ReceiverAssembly?: string;
        ReceiverClass?: string;
        ReceiverName: string;
        ReceiverUrl?: string;
        SequenceNumber?: number;
        Synchronization?: number;
    }
    export interface IEventReceiverMethods {
        delete(): IBase;
        update(data: any): IBase;
    }
    export interface IEventReceiverProps {
        EventType: number;
        ReceiverAssembly?: string;
        ReceiverClass?: string;
        ReceiverId?: string;
        ReceiverName: string;
        ReceiverUrl?: string;
        SequenceNumber?: number;
        Synchronization?: number;
    }
    export interface IEventReceiverQueryProps {
    }
    export interface IEventReceiverQueryResult extends IEventReceiverMethods, IEventReceiverProps {
    }
    export interface IEventReceiverResult extends IEventReceiverMethods, IEventReceiverProps, IEventReceiverQueryProps, IBase<IEventReceiver, IEventReceiverResult, IEventReceiverQueryResult> {
    }
    export interface IEventReceiver extends IEventReceiverMethods, IEventReceiverQueryProps, IBase<IEventReceiver, IEventReceiverResult, IEventReceiverQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/eventReceivers' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IEventReceiver, IEventReceiverDefinitionCreationInformation, IEventReceiverQueryResult, IEventReceiverResult } from "gd-sprest/mapper/types";
    export interface IEventReceiversMethods {
        add(parameters: IEventReceiverDefinitionCreationInformation): IBase<IEventReceiver, IEventReceiverResult>;
        getById(id: string): IEventReceiver & IBase<IEventReceiver, IEventReceiverResult, IEventReceiverQueryResult>;
        next(): IBase<IEventReceivers, IEventReceiverResults>;
    }
    export interface IEventReceivers extends IEventReceiversMethods, IBaseCollection<IEventReceiver, IEventReceiverResult, IEventReceiverQueryResult> {
    }
    export interface IEventReceiverResults extends IEventReceiversMethods, IBaseCollection<IEventReceiverResult, IEventReceiverResult, IEventReceiverQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/field' {
    import { IBase } from "gd-sprest/utils/types";
    import { IResourcePath } from "gd-sprest/mapper/types";
    export interface IFieldCreationInformation {
        Choices?: {
            results: Array<string>;
        };
        FieldTypeKind: number;
        IsCompactName?: boolean;
        LookupFieldName?: string;
        LookupListId?: any;
        LookupWebId?: any;
        Required?: boolean;
        Title: string;
    }
    export interface IFieldMethods {
        delete(): IBase;
        setShowInDisplayForm(showInForm: any): IBase;
        setShowInEditForm(showInForm: any): IBase;
        setShowInNewForm(showInForm: any): IBase;
        update(data: any): IBase;
    }
    export interface IFieldProps {
        AutoIndexed: boolean;
        CanBeDeleted: boolean;
        DefaultValue: string;
        Description: string;
        Direction: string;
        EnforceUniqueValues: boolean;
        EntityPropertyName: string;
        FieldTypeKind: number;
        Filterable: boolean;
        FromBaseType: boolean;
        Group: string;
        Hidden: boolean;
        Id: string;
        Indexed: boolean;
        InternalName: string;
        JSLink: string;
        ReadOnlyField: boolean;
        Required: boolean;
        SchemaXml: string;
        Scope: string;
        Sealed: boolean;
        Sortable: boolean;
        StaticName: string;
        Title: string;
        TypeAsString: string;
        TypeDisplayName: string;
        TypeShortDescription: string;
        ValidationFormula: string;
        ValidationMessage: string;
    }
    export interface IFieldQueryProps {
        DescriptionResource(): IBase<IResourcePath>;
        TitleResource(): IBase<IResourcePath>;
    }
    export interface IFieldQueryResult extends IFieldMethods, IFieldProps {
        DescriptionResource: IResourcePath;
        TitleResource: IResourcePath;
    }
    export interface IFieldResult extends IFieldMethods, IFieldProps, IFieldQueryProps, IBase<IField, IFieldResult, IFieldQueryResult> {
    }
    export interface IField extends IFieldMethods, IFieldQueryProps, IBase<IField, IFieldResult, IFieldQueryResult> {
    }
    export interface IFieldBaseChoice extends IFieldResult {
        Choices: {
            results: Array<string>;
        };
        FillInChoice: boolean;
        Mappings: string;
    }
    export interface IFieldCalculated extends IFieldResult {
        DateFormat: number;
        Formula: string;
        OutputType: number;
    }
    export interface IFieldChoice extends IFieldBaseChoice {
        EditFormat: number;
    }
    export interface IFieldComputed extends IFieldResult {
        EnableLookup: boolean;
    }
    export interface IFieldCurrency extends IFieldNumber {
        CurrencyLocaleId: number;
    }
    export interface IFieldDateTime extends IFieldResult {
        DateTimeCalendarType: number;
        DisplayFormat: number;
        FriendlyDisplayFormat: number;
    }
    export interface IFieldLookup extends IFieldResult {
        AllowMultipleValues: boolean;
        IsDependentLookup: boolean;
        IsRelationship: boolean;
        LookupField: string;
        LookupList: string;
        LookupWebId: string;
        PrimaryFieldId: string;
        RelationshipDeleteBehavior: number;
    }
    export interface IFieldManagedMetadata extends IFieldLookup {
        AnchorId: string;
        IsAnchorValid: boolean;
        IsKeyword: boolean;
        IsPathRendered: boolean;
        IsTermSetValid: boolean;
        PinnedToFiltersPane: boolean;
        ShowInFiltersPane: number;
        SspId: string;
        TermSetId: string;
        UserCreated: boolean;
    }
    export interface IFieldMultiChoice extends IFieldBaseChoice {
    }
    export interface IFieldNote extends IFieldResult {
        AllowHyperlink: boolean;
        AppendOnly: boolean;
        NumberOfLines: number;
        RestrictedMode: boolean;
        RichText: boolean;
        WikiLinking: boolean;
    }
    export interface IFieldNumber extends IFieldResult {
        MaximumValue: number;
        MinimumValue: number;
        ShowAsPercentage?: boolean;
    }
    export interface IFieldRatingScale extends IFieldBaseChoice {
        GridEndNumber: number;
        GridNAOptionText: string;
        GridStartNumber: number;
        GridTextRangeAverage: string;
        GridTextRangeHigh: string;
        GridTextRangeLow: string;
        RangeCount: number;
    }
    export interface IFieldText extends IFieldResult {
        MaxLength: number;
    }
    export interface IFieldUrl extends IFieldResult {
        DisplayFormat: number;
    }
    export interface IFieldUser extends IFieldLookup {
        AllowDisplay: boolean;
        Presence: boolean;
        SelectionGroup: number;
        SelectionMode: number;
    }
}

declare module 'gd-sprest/mapper/types/fieldLink' {
    export interface IFieldLink {
        DisplayName: string;
        FieldInternalName: string;
        Hidden: boolean;
        Id: string;
        Name: string;
        ReadOnly: boolean;
        Required: boolean;
        ShowInDisplayForm: boolean;
    }
}

declare module 'gd-sprest/mapper/types/fieldLinks' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IFieldLink } from "gd-sprest/mapper/types";
    export interface IFieldLinks extends IBaseCollection<IFieldLink, IFieldLink, IFieldLink> {
        add(data: any): IBase<IFieldLink>;
        getById(id: any): IFieldLink & IBase<IFieldLink>;
        next(): IBase<IFieldLinks>;
    }
}

declare module 'gd-sprest/mapper/types/fields' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IField, IFieldCreationInformation, IFieldQueryResult, IFieldResult } from "gd-sprest/mapper/types";
    export interface IFieldsMethods {
        add(parameters: IField): IBase<IField, IFieldResult>;
        addField(parameters: IFieldCreationInformation): IBase<IField, IFieldResult>;
        addDependentLookupField(displayName: any, primaryLookupField: any, showField: any): IBase<IField, IFieldResult>;
        createFieldAsXml(schemaXml: any): IBase<IField, IFieldResult>;
        getById(id: any): IField & IBase<IField, IFieldResult, IFieldQueryResult>;
        getByInternalNameOrTitle(internalNameOrTitle: any): IField & IBase<IField, IFieldResult, IFieldQueryResult>;
        getByTitle(title: any): IField & IBase<IField, IFieldResult, IFieldQueryResult>;
        next(): IBase<IFields, IFieldResults>;
    }
    export interface IFields extends IFieldsMethods, IBaseCollection<IField, IFieldResult, IFieldQueryResult> {
    }
    export interface IFieldResults extends IFieldsMethods, IBaseCollection<IFieldResult, IFieldResult, IFieldQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/file' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IFileVersionResult, IFileVersions } from "gd-sprest/mapper/types";
    export interface IFileMethods {
        approve(comment: any): IBase;
        cancelupload(uploadId: any): IBase;
        checkin(comment: any, checkInType: any): IBase;
        checkout(): IBase;
        content(): IBase;
        continueUpload(uploadId: any, fileOffset: any): IBase;
        copyTo(strNewUrl: any, bOverWrite: any): IBase;
        delete(): IBase;
        deny(comment: any): IBase;
        finishUpload(uploadId: any, fileOffset: any): IBase;
        getlimitedwebpartmanager(scope: any): IBase;
        moveTo(newUrl: any, flags: any): IBase;
        openBinaryStream(): IBase;
        publish(comment: any): IBase;
        recycle(): IBase;
        saveBinaryStream(stream: any): IBase;
        startUpload(uploadId: any): IBase;
        undoCheckOut(): IBase;
        unpublish(comment: any): IBase;
        update(data: any): IBase;
    }
    export interface IFileProps {
        CheckInComment: string;
        CheckOutType: number;
        ContentTag: string;
        CustomizedPageStatus: number;
        ETag: string;
        Exists: boolean;
        Length: number;
        Level: number;
        LinkingUrl: string;
        MajorVersion: number;
        MinorVersion: number;
        Name: string;
        ServerRelativePath: Types.SP.IResourcePath;
        ServerRelativeUrl: string;
        SiteId: string;
        TimeCreated: string;
        TimeLastModified: string;
        Title: string;
        UiVersion: number;
        UiVersionLabel: string;
        UniqueId: string;
        WebId: string;
    }
    export interface IFileQueryProps {
        Author(): Types.SP.IUser;
        CheckedOutByUser(): Types.SP.IUser;
        EffectiveInformationRightsManagementSettings(): IBase;
        InformationRightsManagementSettings(): IBase;
        ListItemAllFields(): IBase;
        LockedByUser(): Types.SP.IUser;
        ModifiedBy(): Types.SP.IUser;
        Properties(): IBase<Types.SP.IPropertyValues>;
        VersionEvents(): IBase;
        Versions(): IBase<IFileVersions>;
    }
    export interface IFileQueryResult extends IFileMethods, IFileProps {
        Author: Types.SP.IUserResult;
        CheckedOutByUser: Types.SP.IUserResult;
        EffectiveInformationRightsManagementSettings: IBase;
        InformationRightsManagementSettings: Types.SP.IInformationRightsManagementSettings;
        ListItemAllFields: Types.SP.IListItemResult;
        LockedByUser: Types.SP.IUserResult;
        ModifiedBy: Types.SP.IUserResult;
        Properties: Types.SP.IPropertyValues;
        VersionEvents: Types.SP.IResults<any>;
        Versions: Types.SP.IResults<IFileVersionResult>;
    }
    export interface IFileResult extends IFileMethods, IFileProps, IFileQueryProps, IBase<IFile, IFileResult, IFileQueryResult> {
    }
    export interface IFile extends IFileMethods, IFileQueryProps, IBase<IFile, IFileResult, IFileQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/files' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IFile, IFileQueryResult, IFileResult } from "gd-sprest/mapper/types";
    export interface IFilesMethods {
        add(overwrite: any, url: any, content: any): IBase<IFile, IFileResult>;
        addTemplateFile(urlOfFile: any, templateFileType: number): IBase<IFile, IFileResult>;
        getByUrl(serverRelativeUrl: any): IFile & IBase<IFile, IFileResult, IFileQueryResult>;
        next(): IBase<IFiles>;
    }
    export interface IFiles extends IFilesMethods, IBaseCollection<IFile, IFileResult, IFileQueryResult> {
    }
    export interface IFileResults extends IFilesMethods, IBaseCollection<IFileResult, IFileResult, IFileQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/fileVersion' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IFileVersion, IFileVersionQueryResult, IFileVersionResult } from "gd-sprest/mapper/types";
    export interface IFileVersionMethods {
        delete(): any;
    }
    export interface IFileVersionProps {
        CheckInComment: string;
        Created: string;
        ID: number;
        IsCurrentVersion: string;
        Size: number;
        Url: string;
        VersionLabel: string;
    }
    export interface IFileVersionQueryProps {
        CreatedBy(): Types.SP.IUser;
    }
    export interface IFileVersionQueryResult extends IFileVersionMethods, IFileVersionProps {
        CreatedBy: Types.SP.IUserResult;
    }
    export interface IFileVersionResult extends IFileVersionMethods, IFileVersionProps, IFileVersionQueryProps, IBase<IFileVersion, IFileVersionResult, IFileVersionQueryResult> {
    }
    export interface IFileVersion extends IFileVersionMethods, IFileVersionQueryProps, IBase<IFileVersion, IFileVersionResult, IFileVersionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/fileVersions' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IFileVersion, IFileVersionQueryResult, IFileVersionResult } from "gd-sprest/mapper/types";
    export interface IFileVersions extends IBaseCollection<IFileVersion, IFileVersionResult, IFileVersionQueryResult> {
        next(): IBase<IFileVersions>;
    }
}

declare module 'gd-sprest/mapper/types/folder' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IFile, IFileResults, IFiles, IFolderResults, IFolders } from "gd-sprest/mapper/types";
    export interface IFolderMethods {
        delete(): IBase;
        getByUrl(serverRelativeUrl: any): IFolder & IBase<IFolder, IFolderResult, IFolderQueryResult>;
        recycle(): IBase;
        update(data: any): IBase;
    }
    export interface IFolderProps {
        ContentTypeOrder: Types.SP.IStringValue;
        Exists: boolean;
        ItemCount: number;
        IsWOPIEnabled: boolean;
        Name: string;
        ServerRelativePath: Types.SP.IResourcePath;
        ServerRelativeUrl: string;
        TimeCreated: string;
        TimeLastModified: string;
        UniqueContentTypeOrder: Types.SP.IStringValue;
        UniqueId: string;
        WelcomePage: string;
    }
    export interface IFolderQueryProps {
        Files(): IFiles;
        Files(url: string): IFile;
        Folders(): IFolders;
        Folders(url: string): IFolderMethods;
        ListItemAllFields(): IBase<Types.SP.IListItem>;
        ParentFolder(): IFolderMethods;
        Properties(): IBase<Types.SP.IPropertyValues>;
        StorageMetrics(): IBase;
    }
    export interface IFolderQueryResult extends IFolderMethods, IFolderProps {
        Files: IFileResults;
        Folders: IFolderResults;
        ListItemAllFields: Types.SP.IListItemResults;
        ParentFolder: IFolderResult;
        Properties: Types.SP.IPropertyValues;
        StorageMetrics: any;
    }
    export interface IFolderResult extends IFolderMethods, IFolderProps, IFolderQueryProps, IFolderQueryProps, IBase<IFolder, IFolderResult, IFolderQueryResult> {
    }
    export interface IFolder extends IFolderMethods, IFolderQueryProps, IBase<IFolder, IFolderResult, IFolderQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/folders' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IFolder, IFolderQueryResult, IFolderResult } from "gd-sprest/mapper/types";
    export interface IFoldersMethods {
        add(url: any): IBase<IFolder, IFolderResult>;
        getbyurl(serverRelativeUrl: any): IFolder & IBase<IFolder, IFolderResult, IFolderQueryResult>;
        next(): IBase<IFolders, IFolderResults>;
    }
    export interface IFolders extends IFoldersMethods, IBaseCollection<IFolder, IFolderResult, IFolderQueryResult> {
    }
    export interface IFolderResults extends IFoldersMethods, IBaseCollection<IFolderResult, IFolderResult, IFolderQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/group' {
    import { IBase } from "gd-sprest/utils/types";
    import { IUser, IUserResult, IUserResults, IUsers } from "gd-sprest/mapper/types";
    export interface IGroupCreationInformation {
        Description?: string;
        Title: string;
    }
    export interface IGroupMethods {
    }
    export interface IGroupProps {
        AllowMembersEditMembership: boolean;
        AllowRequestToJoinLeave: boolean;
        Description: string;
        Id: string;
        IsHiddenInUI: string;
        LoginName: string;
        OnlyAllowMembersViewMembership: boolean;
        OwnerTitle: string;
        RequestToJoinLeaveEmailSetting: string;
        PrincipalType: string;
        Title: string;
    }
    export interface IGroupQueryProps {
        AutoAcceptRequestToJoinLeave(): IBase<boolean>;
        CanCurrentUserEditMembership(): IBase<boolean>;
        CanCurrentUserManageGroup(): IBase<boolean>;
        CanCurrentUserViewMembership(): IBase<boolean>;
        Owner(): IUser;
        Users(): IUsers;
        Users(id: any): IUser;
    }
    export interface IGroupQueryResult extends IGroupMethods, IGroupProps {
        AutoAcceptRequestToJoinLeave: boolean;
        CanCurrentUserEditMembership: boolean;
        CanCurrentUserManageGroup: boolean;
        CanCurrentUserViewMembership: boolean;
        Owner: IUserResult;
        Users: IUserResults;
    }
    export interface IGroupResult extends IGroupMethods, IGroupProps, IGroupQueryProps, IBase<IGroup, IGroupResult, IGroupQueryResult> {
    }
    export interface IGroup extends IGroupMethods, IGroupQueryProps, IBase<IGroup, IGroupResult, IGroupQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/groups' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IGroup, IGroupCreationInformation, IGroupQueryResult, IGroupResult } from "gd-sprest/mapper/types";
    export interface ISiteGroupsMethods {
        add(groupInfo: IGroupCreationInformation): IBase<IGroup, IGroupResult>;
        getById(id: any): IGroup & IBase<IGroup, IGroupResult, IGroupQueryResult>;
        getByName(name: any): IGroup & IBase<IGroup, IGroupResult, IGroupQueryResult>;
        next(): IBase<ISiteGroups, ISiteGroupResults>;
        removeById(id: any): IBase;
        removeByLoginName(name: any): IBase;
    }
    export interface ISiteGroups extends ISiteGroupsMethods, IBaseCollection<IGroup, IGroupResult, IGroupQueryResult> {
    }
    export interface ISiteGroupResults extends ISiteGroupsMethods, IBaseCollection<IGroupResult, IGroupResult, IGroupQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/items' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IListItem, IListItemQueryResult, IListItemResult } from "gd-sprest/mapper/types";
    export interface IListItemsMethods {
        add(data: any): IBase<IListItem, IListItemResult>;
        getById(id: any): IListItem & IBase<IListItem, IListItemResult, IListItemQueryResult>;
        next(): IBase<IListItems, IListItemResults>;
    }
    export interface IListItems extends IListItemsMethods, IBaseCollection<IListItem, IListItemResult, IListItemQueryResult> {
    }
    export interface IListItemResults extends IListItemsMethods, IBaseCollection<IListItemResult, IListItemResult, IListItemQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/limitedWebPartManager' {
    import { IBase } from "gd-sprest/utils/types";
    export interface ILimitedWebPartManager extends IBase<ILimitedWebPartManager, ILimitedWebPartManager> {
        HasPersonalizedParts: boolean;
        Scope: number;
        WebParts(id: any): IBase;
    }
}

declare module 'gd-sprest/mapper/types/list' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IContentType, IContentTypeResults, IContentTypes, IListItem, IListItemQueryResult, IListItemResult, IListItemResults, IListItems, IView, IViewQueryResult, IViewResult, IViewResults, IViews } from "gd-sprest/mapper/types";
    export interface IListCreationInformation {
        BaseTemplate: number;
        CustomSchemaXml?: string;
        DataSourceProperties?: Array<string>;
        Description?: string;
        DocumentTemplateType?: number;
        QuickLaunchOption?: number;
        TemplateFeatureId?: string;
        Title: string;
    }
    export interface IListDataSource {
        Properties: Array<string>;
    }
    export interface IListTemplate {
        AllowsFolderCreation: boolean;
        Description: string;
        FeatureId: string;
        Hidden: boolean;
        ImageUrl: string;
        InternalName: string;
        IsCustomTemplate: boolean;
        ListTemplateTypeKind: number;
        Name: string;
        OnQuickLaunch: boolean;
        Unique: boolean;
    }
    export interface IListMethods {
        breakRoleInheritance(copyRoleAssignments: any, clearSubScopes: any): any;
        delete(): IBase;
        getByEntityName(entityTypeName: string, callback: (IList) => void, targetInfo?: any): IBase<IList, IListResult, IListQueryResult>;
        getChanges(query: any): IBase;
        getItemById(id: any): IListItem & IBase<IListItem, IListItemResult, IListItemQueryResult>;
        getItems(viewXml: any): IBase<IListItems, IListItemResults>;
        getItemsByQuery(camlQuery: any): IBase<IListItems, IListItemResults>;
        getListItemChangesSinceToken(query: Types.SP.ComplexTypes.ChangeLogItemQuery): IBase<IListItems, IListItemResults>;
        getRelatedFields(): IBase;
        getUserEffectivePermissions(loginName: any): IBase;
        getViewById(viewId: any): IView & IBase<IView, IViewResult, IViewQueryResult>;
        recycle(): IBase;
        renderListData(viewXml: any): IBase;
        renderListFormData(itemId: any, formId: any, mode: number): IBase;
        reserveListItemId(): IBase;
        resetRoleInheritance(): IBase;
        update(data: any): IBase;
    }
    export interface IListProps {
        AllowContentTypes: boolean;
        AllowDeletion: boolean;
        BaseTemplate: number;
        BaseType: number;
        BrowserFileHandling: number;
        ContentTypesEnabled: boolean;
        Created: string;
        CurrentChangeToken: Types.SP.IStringValue;
        DefaultContentApprovalWorkflowId: string;
        Description: string;
        Direction: string;
        DocumentTemplateUrl: string;
        DraftVersionVisibility: number;
        EnableAssignToEmail: boolean;
        EnableAttachments: boolean;
        EnableFolderCreation: boolean;
        EnableMinorVersions: boolean;
        EnableModeration: boolean;
        EnableVersioning: boolean;
        EntityTypeName: string;
        ExcludeFromOfflineClient: boolean;
        FileSavePostProcessingEnabled: boolean;
        ForceCheckout: boolean;
        HasExternalDataSource: boolean;
        Hidden: boolean;
        Id: string;
        ImageUrl: string;
        IrmEnabled: boolean;
        IrmExpire: boolean;
        IrmReject: boolean;
        IsApplicationList: boolean;
        IsCatalog: boolean;
        IsPrivate: boolean;
        ItemCount: number;
        LastItemDeletedDate: string;
        LastItemModifiedDate: string;
        ListExperienceOptions: number;
        ListItemEntityTypeFullName: string;
        MajorVersionLimit: number;
        MajorWithMinorVersionsLimit: number;
        MultipleDataList: boolean;
        NoCrawl: boolean;
        ParentWebUrl: string;
        ParserDisabled: boolean;
        ReadSecurity: number;
        ServerTemplateCanCreateFolders: boolean;
        TemplateFeatureId: string;
        Title: string;
    }
    export interface IListQueryProps {
        ContentTypes(): IContentTypes;
        ContentTypes(id: string): IContentType;
        DataSource(): IBase<Array<string>>;
        DefaultDisplayFormUrl(): IBase<string>;
        DefaultEditFormUrl(): IBase<string>;
        DefaultNewFormUrl(): IBase<string>;
        DefaultView(): IView;
        DescriptionResouce(): IBase<Types.SP.IResourcePath>;
        EffectiveBasePermissions(): IBase<Types.SP.IBasePermissions>;
        EffectiveBasePermissionsForUI(): IBase<Types.SP.IBasePermissions>;
        EventReceivers(): Types.SP.IEventReceivers;
        EventReceivers(id: string): Types.SP.IEventReceiver;
        Fields(): Types.SP.IFields;
        Fields(internalNameOrTitle: string): Types.SP.IField;
        FirstUniqueAncestorSecurableObject(): IBase<string>;
        Forms(): IBase;
        Forms(id: string): IBase;
        HasUniqueRoleAssignments(): IBase;
        InformationRightsManagementSettings(): IBase;
        IsSiteAssetsLibrary(): IBase<boolean>;
        Items(): IListItems;
        Items(id: number): IListItem;
        OnQuickLaunch(): IBase<boolean>;
        ParentWeb(): Types.SP.IWeb;
        RoleAssignments(): Types.SP.IRoleAssignments;
        RoleAssignments(id: string): Types.SP.IRoleAssignment;
        RootFolder(): Types.SP.IFolder;
        RootFolder(url: string): Types.SP.IFile;
        SchemaXml(): IBase<string>;
        Subscriptions(): IBase<IBase>;
        TitleResource(): IBase<Types.SP.IResourcePath>;
        UserCustomActions(): Types.SP.IUserCustomActions;
        UserCustomActions(id: string): Types.SP.IUserCustomAction;
        ValidationFormula(): IBase<string>;
        ValidationMessage(): IBase<string>;
        Views(): IViews;
        Views(id: string): IView;
        WorkflowAssociations(): IBase<string>;
        WriteSecurity(): IBase<number>;
    }
    export interface IListQueryResult extends IListMethods, IListProps {
        ContentTypes: IContentTypeResults;
        DataSource: IListDataSource;
        DefaultDisplayFormUrl: string;
        DefaultEditFormUrl: string;
        DefaultNewFormUrl: string;
        DefaultView: IViewResult;
        DefaultViewUrl: string;
        DescriptionResouce: Types.SP.IResourcePath;
        EffectiveBasePermissions: Types.SP.IBasePermissions;
        EffectiveBasePermissionsForUI: Types.SP.IBasePermissions;
        EventReceivers: Types.SP.IEventReceiverResults;
        Fields: Types.SP.IFieldResults;
        FirstUniqueAncestorSecurableObject: Types.SP.IWebResult;
        Forms: Types.SP.IResults<Types.SP.IForm>;
        HasUniqueRoleAssignments: boolean;
        InformationRightsManagementSettings: Types.SP.IInformationRightsManagementSettings;
        IsSiteAssetsLibrary: boolean;
        Items: IListItemResults;
        OnQuickLaunch: boolean;
        ParentWeb: Types.SP.IWebResult;
        RoleAssignments: Types.SP.IRoleAssignmentResults;
        RootFolder: Types.SP.IFolderResult;
        SchemaXml: string;
        Subscriptions: Types.SP.IResults<Types.SP.ISubscription>;
        TitleResource: Types.SP.IResourcePath;
        UserCustomActions: Types.SP.IUserCustomActionResults;
        ValidationFormula: string;
        ValidationMessage: string;
        Views: IViewResults;
        WorkflowAssociations: Types.SP.IResults<string>;
        WriteSecurity: number;
    }
    export interface IListResult extends IListMethods, IListProps, IListQueryProps, IBase<IList, IListResult, IListQueryResult> {
    }
    export interface IList extends IListMethods, IListQueryProps, IBase<IList, IListResult, IListQueryResult> {
        new (listName: string, targetInfo?: ITargetInfo): IList;
    }
}

declare module 'gd-sprest/mapper/types/listItem' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IContentType, IContentTypeResult, IList, IListResult } from "gd-sprest/mapper/types";
    export interface IListItemMethods {
        breakRoleInheritance(copyRoleAssignments: any, clearSubScopes: any): IBase;
        delete(): IBase;
        getUserEffectivePermissions(loginName: any): IBase;
        recycle(): IBase;
        resetRoleInheritance(): IBase;
        update(data: any): IBase;
        validateUpdateListItem(formValues: any, bNewDocumentUpdate: any): any;
    }
    export interface IListItemProps {
        DisplayName: string;
        EffectiveBasePermissions: Types.SP.IBasePermissions;
        EffectiveBasePermissionsForUI: Types.SP.IBasePermissions;
        FileSystemObjectType: number;
        IconOverlay: string;
        Id: number;
        ServerRedirectedEmbedUrl: string;
    }
    export interface IListItemQueryProps {
        AttachmentFiles(): Types.SP.IAttachmentFiles;
        AttachmentFiles(fileName: string): IBase<Types.SP.IAttachment>;
        ContentType(): IContentType;
        FieldValuesAsHtml(): IBase;
        FieldValuesAsText(): IBase;
        FieldValuesForEdit(): IBase;
        File(): Types.SP.IFile;
        FirstUniqueAncestorSecurableObject(): IBase<string>;
        Folder(): Types.SP.IFolder;
        GetDlpPolicyTip(): IBase;
        HasUniqueRoleAssignments(): IBase<string>;
        ParentList(): IList;
        Properties(): IBase<Types.SP.IPropertyValues>;
        RoleAssignments(): Types.SP.IRoleAssignments;
        RoleAssignments(id: string): Types.SP.IRoleAssignment;
    }
    export interface IListItemQueryResult extends IListItemMethods, IListItemProps {
        AttachmentFiles: Types.SP.IAttachmentFilesMethods & Types.SP.IResults<Types.SP.IAttachment>;
        ContentType: IContentTypeResult;
        FieldValuesAsHtml: Array<string>;
        FieldValuesAsText: Array<string>;
        FieldValuesForEdit: Array<string>;
        File: Types.SP.IFileResult;
        FirstUniqueAncestorSecurableObject: IListResult;
        Folder: Types.SP.IFolderResult;
        GetDlpPolicyTip(): IBase;
        HasUniqueRoleAssignments: boolean;
        ParentList: IListResult;
        Properties: Array<string>;
        RoleAssignments: Types.SP.IRoleAssignmentResults;
    }
    export interface IListItemResult extends IListItemMethods, IListItemProps, IListItemQueryProps, IBase<IListItem, IListItemResult, IListItemQueryResult> {
    }
    export interface IListItem extends IListItemMethods, IListItemQueryProps, IBase<IListItem, IListItemResult, IListItemQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/lists' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IList, IListCreationInformation, IListQueryResult, IListResult } from "gd-sprest/mapper/types";
    export interface IListsMethods {
        add(parameters: IListCreationInformation): IBase<IList, IListResult>;
        ensureSiteAssetsLibrary(): IBase<IList, IListResult, IListQueryResult>;
        ensureSitePagesLibrary(): IBase<IList, IListResult, IListQueryResult>;
        getById(id: any): IList & IBase<IList, IListResult, IListQueryResult>;
        getByTitle(title: any): IList & IBase<IList, IListResult, IListQueryResult>;
        next(): IBase<ILists, IListResults>;
    }
    export interface ILists extends IListsMethods, IBaseCollection<IList, IListResult, IListQueryResult> {
    }
    export interface IListResults extends IListsMethods, IBaseCollection<IListResult, IListResult, IListQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/navigation' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { IMenuState } from "gd-sprest/mapper/types";
    export interface INavigationServiceRESTMethods {
        getMenuState(menuNodeKey?: number, depth?: number, customProperties?: string, mapProviderName?: string): IBase<IMenuState>;
    }
    export interface INavigationServiceRESTProps {
    }
    export interface INavigationServiceRESTQueryProps {
        MenuState(): IBase<IMenuState>;
        MenuState(key: number): IBase<IMenuState>;
    }
    export interface INavigationServiceREST extends INavigationServiceRESTMethods, INavigationServiceRESTQueryProps, IBase<INavigationServiceREST> {
        new (url?: string, targetInfo?: ITargetInfo): INavigationServiceREST;
    }
}

declare module 'gd-sprest/mapper/types/peopleManager' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { ComplexTypes } from "gd-sprest/mapper/types";
    export interface IPersonProperties extends IBase<IPersonProperties> {
        AccountName: string;
        DirectReports: string;
        DisplayName: string;
        Email: string;
        ExtendedManagers: string;
        ExtendedReports: string;
        IsFollowed: boolean;
        LatestPost: string;
        Peers: string;
        PersonalUrl: string;
        PictureUrl: string;
        Title: string;
        UserProfileProperties: ComplexTypes.KeyValue;
        UserUrl: string;
    }
    export interface IPeopleManager extends IBase<IPeopleManager> {
        new (targetInfo?: ITargetInfo): IPeopleManager;
        EditProfileLink: string;
        IsMyPeopleListPublic: boolean;
        amIFollowedBy(accountName: string): IBase;
        amIFollowing(accountName: string): IBase;
        follow(accountName: string): IBase;
        followTag(id: string): IBase;
        getFollowedTags(maxCount: number): IBase;
        getFollowersFor(accountName: string): IBase<IPersonProperties>;
        getMyFollowers(): IBase<IPersonProperties>;
        getMyProperties(): IBase<IPersonProperties>;
        getMySuggestions(): IBase<IPersonProperties>;
        getPeopleFollowedBy(accountName: string): IBase<IPersonProperties>;
        getPeopleFollowedByMe(): IBase<IPersonProperties>;
        getPropertiesFor(accountName: string): IBase<IPersonProperties>;
        getTrendingTags(): IBase;
        getUserProfilePropertyFor(accountName: string, propertyName: string): IBase<IPersonProperties>;
        hideSuggestion(accountName: string): IBase;
        isFollowing(possibleFollowerAccountName: string, possibleFolloweeAccountName: string): IBase;
        setMyProfilePicture(stream: any): IBase;
        stopFollowing(accountName: string): IBase;
        stopFollowingTag(id: string): IBase;
    }
}

declare module 'gd-sprest/mapper/types/peoplePicker' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { IEntityData } from "gd-sprest/mapper/types";
    export interface IPeoplePickerQuery {
        AllowEmailAddresses?: boolean;
        AllowMultipleEntities?: boolean;
        AllUrlZones?: boolean;
        EnabledClaimProviders?: boolean;
        ForceClaims?: boolean;
        MaximumEntitySuggestions: number;
        PrincipalSource?: number;
        PrincipalType?: number;
        QueryString?: string;
        Required?: boolean;
        SharePointGroupID?: number;
        UrlZone?: number;
        UrlZoneSpecified?: boolean;
        Web?: any;
        WebApplicationID?: any;
    }
    export interface IPeoplePickerResolveUser {
        ClientPeoplePickerResolveUser: Array<IPeoplePickerUser>;
    }
    export interface IPeoplePickerSearchUser {
        ClientPeoplePickerSearchUser: Array<IPeoplePickerUser>;
    }
    export interface IPeoplePickerUser {
        Description: string;
        DisplayText: string;
        EntityData: IEntityData;
        EntityType: string;
        IsResolved: boolean;
        Key: string;
        MultipleMatches: Array<IEntityData>;
        ProviderDisplayName: string;
        ProviderName: string;
    }
    export interface IPeoplePicker extends IBase {
        new (settings?: ITargetInfo): IPeoplePicker;
        clientPeoplePickerResolveUser(query: IPeoplePickerQuery): IBase<IPeoplePickerResolveUser>;
        clientPeoplePickerSearchUser(query: IPeoplePickerQuery): IBase<IPeoplePickerSearchUser>;
    }
}

declare module 'gd-sprest/mapper/types/profileLoader' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { IUserProfile } from "gd-sprest/mapper/types";
    export interface IProfileLoader extends IBase<IProfileLoader> {
        new (targetInfo?: ITargetInfo): IProfileLoader;
        createPersonalSiteEnqueueBulk(emailIDs: Array<string>): IBase;
        getOwnerUserProfile(): IBase<IUserProfile>;
        getUserProfile(): IBase<IUserProfile>;
    }
}

declare module 'gd-sprest/mapper/types/propertyValues' {
    import { IBase } from "gd-sprest/utils/types";
    import { ComplexTypes, ODataQuery } from "gd-sprest/mapper/types";
    export interface IPropertyValues extends IBase, ComplexTypes.KeyValue {
        query(query: ODataQuery): IPropertyValues;
    }
}

declare module 'gd-sprest/mapper/types/results' {
    import { ComplexTypes } from "gd-sprest/mapper/types";
    export interface AppLicense {
        results: Array<AppLicense>;
    }
    export interface ContentTypeId {
        results: Array<ComplexTypes.ContentTypeId>;
    }
    export interface CreatableItemInfo {
        results: Array<ComplexTypes.CreatableItemInfoCollection>;
    }
    export interface CustomActionElement {
        results: Array<CustomActionElement>;
    }
    export interface CustomResult {
        results: Array<CustomResult>;
    }
    export interface DataRow {
        results: Array<ComplexTypes.SimpleDataRow>;
    }
    export interface KeyValue {
        results: Array<KeyValue>;
    }
    export interface ListDataValidationFailure {
        results: Array<ListDataValidationFailure>;
    }
    export interface MenuNode {
        results: Array<MenuNode>;
    }
    export interface Number {
        results: Array<number>;
    }
    export interface Object {
        results: Array<object>;
    }
    export interface ParameterInformation {
        results: Array<ParameterInformation>;
    }
    export interface PersonalResultSuggestion {
        results: Array<PersonalResultSuggestion>;
    }
    export interface QueryResult {
        results: Array<QueryResult>;
    }
    export interface QuerySuggestionQuery {
        results: Array<QuerySuggestionQuery>;
    }
    export interface Refiner {
        results: Array<Refiner>;
    }
    export interface RefinerEntry {
        results: Array<RefinerEntry>;
    }
    export interface SharedWithUser {
        results: Array<SharedWithUser>;
    }
    export interface SocialActor {
        results: Array<SocialActor>;
    }
    export interface SocialDataItem {
        results: Array<SocialDataItem>;
    }
    export interface SocialDataOverlay {
        results: Array<SocialDataOverlay>;
    }
    export interface SocialPost {
        results: Array<SocialPost>;
    }
    export interface SocialPostDefinitionDataItem {
        results: Array<SocialPostDefinitionDataItem>;
    }
    export interface SocialThread {
        results: Array<SocialThread>;
    }
    export interface String {
        results: Array<string>;
    }
    export interface VisualizationField {
        results: Array<VisualizationField>;
    }
}

declare module 'gd-sprest/mapper/types/roleAssignment' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IRoleDefinition, IRoleDefinitions } from "gd-sprest/mapper/types";
    export interface IRoleAssignmentMethods {
        delete(): IBase;
    }
    export interface IRoleAssignmentProps {
        PrincipalId: string;
    }
    export interface IRoleAssignmentQueryProps {
        Member(): IBase<Types.SP.IGroup | Types.SP.IUser>;
        RoleDefinitionBindings(): IRoleDefinitions;
    }
    export interface IRoleAssignmentQueryResult extends IRoleAssignmentMethods, IRoleAssignmentProps {
        Member: Types.SP.IUser;
        RoleDefinitionBindings: Types.SP.IResults<IRoleDefinition>;
    }
    export interface IRoleAssignmentResult extends IRoleAssignmentMethods, IRoleAssignmentProps, IRoleAssignmentQueryProps, IBase<IRoleAssignment, IRoleAssignmentResult, IRoleAssignmentQueryResult> {
    }
    export interface IRoleAssignment extends IRoleAssignmentMethods, IRoleAssignmentQueryProps, IBase<IRoleAssignment, IRoleAssignmentResult, IRoleAssignmentQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/roleAssignments' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IRoleAssignment, IRoleAssignmentQueryResult, IRoleAssignmentResult } from "gd-sprest/mapper/types";
    export interface IRoleAssignmentsMethods {
        addRoleAssignment(principalId: any, roleDefId: any): IBase<IRoleAssignment, IRoleAssignmentResult>;
        getByPrincipalId(principalId: any): IRoleAssignment & IBase<IRoleAssignment, IRoleAssignmentResult, IRoleAssignmentQueryResult>;
        removeRoleAssignment(principalId: any, roleDefId: any): IBase;
        next(): IBase<IRoleAssignments, IRoleAssignmentResults>;
    }
    export interface IRoleAssignments extends IRoleAssignmentsMethods, IBaseCollection<IRoleAssignment, IRoleAssignmentResult, IRoleAssignmentQueryResult> {
    }
    export interface IRoleAssignmentResults extends IRoleAssignmentsMethods, IBaseCollection<IRoleAssignmentResult, IRoleAssignmentResult, IRoleAssignmentQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/roleDefinition' {
    import { IBase } from "gd-sprest/utils/types";
    import { IBasePermissions } from "gd-sprest/mapper/types";
    export interface IRoleDefinitionMethods {
        delete(): IBase;
    }
    export interface IRoleDefinitionProps {
        BasePermissions: IBasePermissions;
        Description: string;
        Hidden: boolean;
        Id: number;
        Name: string;
        Order: number;
        RoleTypeKind: number;
    }
    export interface IRoleDefinitionQueryProps {
    }
    export interface IRoleDefinitionQueryResult extends IRoleDefinitionMethods, IRoleDefinitionProps {
    }
    export interface IRoleDefinitionResult extends IRoleDefinitionMethods, IRoleDefinitionProps, IRoleDefinitionQueryProps, IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult> {
    }
    export interface IRoleDefinition extends IRoleDefinitionMethods, IRoleDefinitionQueryProps, IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/roleDefinitions' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IRoleDefinition, IRoleDefinitionQueryResult, IRoleDefinitionResult } from "gd-sprest/mapper/types";
    export interface IRoleDefinitionsMethods {
        getById(roleDefId: any): IRoleDefinition & IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult>;
        getByName(name: any): IRoleDefinition & IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult>;
        getByType(roleType: number): IRoleDefinition & IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult>;
        next(): IBase<IRoleDefinitions, IRoleDefinitionResults>;
    }
    export interface IRoleDefinitions extends IRoleDefinitionsMethods, IBaseCollection<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult> {
    }
    export interface IRoleDefinitionResults extends IRoleDefinitionsMethods, IBaseCollection<IRoleDefinitionResult, IRoleDefinitionResult, IRoleDefinitionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/search' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { ComplexTypes } from "gd-sprest/mapper/types";
    export interface ISearch extends IBase<ISearch, ComplexTypes.SearchResult> {
        new (url?: string, settings?: ITargetInfo): ISearch;
        postquery(settings: ComplexTypes.SearchRequest): IBase<ComplexTypes.SearchResult>;
        searchquery(settings: ComplexTypes.SearchRequest): IBase<ComplexTypes.SearchResult>;
        suggest(settings: ComplexTypes.SearchSuggestion): IBase<ComplexTypes.QuerySuggestionResults>;
    }
}

declare module 'gd-sprest/mapper/types/site' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { ISiteMethods, IWeb, IWebQueryResult, IWebResult } from "gd-sprest/mapper/types";
    export interface ISiteMethods {
        createPreviewSPSite(upgrade: any, sendEmail: any): IBase;
        extendUpgradeReminderDate(): IBase;
        getCatalog(typeCatalog: any): IBase;
        getChanges(query: any): IBase;
        getCustomListTemplates(web: any): IBase;
        getWebTemplates(LCID: any, overrideCompatLevel: any): IBase;
        invalidate(): IBase;
        needsUpgradeByType(versionUpgrade: any, recursive: any): IBase;
        openWeb(strUrl: any): IBase<IWeb, IWebResult, IWebQueryResult>;
        openWebById(gWebId: any): IBase<IWeb, IWebResult, IWebQueryResult>;
        runHealthCheck(ruleId: any, bRepair: any, bRunAlways: any): IBase;
        runUpgradeSiteSession(versionUpgrade: any, queueOnly: any, sendEmail: any): IBase;
        update(data: any): IBase;
        updateClientObjectModelUseRemoteAPIsPermissionSetting(requireUseRemoteAPIs: any): IBase;
    }
    export interface ISiteProps {
        AllowCreationDeclarativeWorkflow: boolean;
        AllowDesigner: boolean;
        AllowMasterPageEditing: boolean;
        AllowRevertFromTemplate: boolean;
        AllowSaveDeclarativeWorkflowAsTemplate: boolean;
        AllowSavePublishDeclarativeWorkflow: boolean;
        AllowSelfServiceUpgrade: boolean;
        AllowSelfServiceUpgradeEvaluation: boolean;
        AuditLogTrimmingRetention: number;
        CanUpgrade: boolean;
        Classification: string;
        CompatibilityLevel: string;
        CurrentChangeToken: string;
        DisableAppViews: boolean;
        DisableCompanyWideSharingLinks: boolean;
        DisableFlows: boolean;
        ExternalSharingTipsEnabled: boolean;
        GroupId: string;
        Id: string;
        LockIssue: string;
        MaxItemsPerThrottledOperation: number;
        NeedsB2BUpgrade: boolean;
        PrimaryUri: string;
        ReadOnly: boolean;
        RequiredDesignerVersion: string;
        SandboxedCodeActivationCapability: number;
        ServerRelativePath: Types.SP.IResourcePath;
        ServerRelativeUrl: string;
        ShareByEmailEnabled: boolean;
        ShowPeoplePickerSuggestionsForGuestUsers: boolean;
        ShareByLinkEnabled: boolean;
        ShowUrlStructure: boolean;
        StatusBarLink: string;
        StatusBarText: string;
        TrimAuditLog: boolean;
        UIVersionConfigurationEnabled: boolean;
        UpgradeInfo: Types.SP.IUpgradeInfo;
        UpgradeReminderDate: string;
        UpgradeScheduled: boolean;
        UpgradeScheduledDate: string;
        Upgrading: boolean;
        Url: string;
        Usage: Types.SP.IUsageInfo;
    }
    export interface ISiteQueryProps {
        Audit(): IBase<Types.SP.IAudit>;
        EventReceivers(): Types.SP.IEventReceivers;
        EventReceivers(id: string): Types.SP.IEventReceiver;
        Features(): IBase;
        Owner(): Types.SP.IUser;
        RecycleBin(): IBase<Types.SP.IResults<Types.SP.IRecycleBinItem>>;
        RootWeb(): IWeb;
        SecondaryContact(): IBase;
        UserCustomActions(): Types.SP.IUserCustomActions;
        UserCustomActions(id: string): Types.SP.IUserCustomAction;
    }
    export interface ISiteQueryResult extends ISiteMethods, ISiteProps {
        Audit: Types.SP.IAudit;
        EventReceivers: Types.SP.IResults<Types.SP.IEventReceiverResult>;
        Features: Types.SP.IResults<Types.SP.IFeature>;
        Owner: Types.SP.IUserResult;
        RecycleBin: Types.SP.IResults<Types.SP.IRecycleBinItem>;
        RootWeb: IWebResult;
        SecondaryContact: Types.SP.IUserResult;
        UserCustomActions: Types.SP.IUserCustomActionResults;
    }
    export interface ISiteResult extends ISiteMethods, ISiteProps, ISiteQueryProps, IBase<ISite, ISiteResult, ISiteQueryResult> {
    }
    export interface ISite extends ISiteMethods, ISiteQueryProps, IBase<ISite, ISiteResult, ISiteQueryResult> {
        new (url?: string, targetInfo?: ITargetInfo): ISite;
    }
}

declare module 'gd-sprest/mapper/types/socialFeed' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    export interface ISocialFeed {
        actor(accountName: string): IBase<ISocialRestActor>;
        actorFeed(accountName: string): IBase<ISocialRestThread>;
        clearMyUnreadMentionCount(): IBase;
        my(): IBase<ISocialRestActor>;
        myFeed(): IBase<ISocialRestFeed>;
        myLikes(): IBase<ISocialRestFeed>;
        myMentionFeed(): IBase<ISocialRestFeed>;
        myNews(): IBase<ISocialRestFeed>;
        myTimelineFeed(): IBase<ISocialRestFeed>;
        myUnreadMentionCount(): IBase<ISocialRestFeed>;
        postToFeed(accountName: string, postInfo: Types.SP.ComplexTypes.SocialPostCreationData): IBase<ISocialRestThread>;
        postToMyFeed(creationData: Types.SP.ComplexTypes.SocialPostCreationData): IBase<ISocialRestThread>;
    }
    export interface ISocialRestActor extends IBase<ISocialRestActor> {
        FollowableItem?: string;
        FollwableItemActor: Types.SP.ComplexTypes.SocialActor;
        Me: Types.SP.ComplexTypes.SocialActor;
        clearUnreadMentionCount(): IBase<ISocialRestFeed>;
    }
    export interface ISocialRestFeed extends IBase<ISocialRestFeed> {
        SocialFeed: Types.SP.ComplexTypes.SocialFeed;
        post(postInfo: Types.SP.ComplexTypes.SocialRestPostCreationData): ISocialRestThread;
    }
    export interface ISocialRestThread extends IBase<ISocialRestThread> {
        ID?: string;
        SocialThread: Types.SP.ComplexTypes.SocialThread;
        delete(): IBase<ISocialRestThread>;
        reply(restCreationData: Types.SP.ComplexTypes.SocialPostCreationData): IBase<ISocialRestThread>;
    }
}

declare module 'gd-sprest/mapper/types/sptypes' {
    export type ICalendarType = {
        Gregorian: number;
        JapaneseEmperorEra: number;
        TaiwanCalendar: number;
        KoreanTangunEra: number;
        Hijri: number;
        Thai: number;
        HebrewLunar: number;
        GregorianMiddleEastFrench: number;
        GregorianArabic: number;
        GregorianTransliteratedEnglish: number;
        GregorianTransliteratedFrench: number;
        KoreanandJapaneseLunar: number;
        ChineseLunar: number;
        SakaEra: number;
    };
    export type ICheckOutType = {
        Online: number;
        Offline: number;
        None: number;
    };
    export type IChoiceFormatType = {
        Dropdown: number;
        RadioButtons: number;
    };
    export type IClientTemplateUtility = {
        UserLookupDelimitString: string;
        UserMultiValueDelimitString: string;
    };
    export type IControlMode = {
        Invalid: number;
        Display: number;
        Edit: number;
        New: number;
        View: number;
    };
    export type IDateFormat = {
        DateOnly: number;
        DateTime: number;
    };
    export type IDraftVisibilityType = {
        Approver: number;
        Author: number;
        Reader: number;
    };
    export type IEventReceiverType = {
        ItemAdding: number;
        ItemUpdating: number;
        ItemDeleting: number;
        ItemCheckingIn: number;
        ItemCheckingOut: number;
        ItemUncheckingOut: number;
        ItemAttachmentAdding: number;
        ItemAttachmentDeleting: number;
        ItemFileMoving: number;
        ItemVersionDeleting: number;
        FieldAdding: number;
        FieldUpdating: number;
        FieldDeleting: number;
        ListAdding: number;
        ListDeleting: number;
        SiteDeleting: number;
        WebDeleting: number;
        WebMoving: number;
        WebAdding: number;
        GroupAdding: number;
        GroupUpdating: number;
        GroupDeleting: number;
        GroupUserAdding: number;
        GroupUserDeleting: number;
        RoleDefinitionAdding: number;
        RoleDefinitionUpdating: number;
        RoleDefinitionDeleting: number;
        RoleAssignmentAdding: number;
        RoleAssignmentDeleting: number;
        InheritanceBreaking: number;
        InheritanceResetting: number;
        WorkflowStarting: number;
        ItemAdded: number;
        ItemUpdated: number;
        ItemDeleted: number;
        ItemCheckedIn: number;
        ItemCheckedOut: number;
        ItemUncheckedOut: number;
        ItemAttachmentAdded: number;
        ItemAttachmentDeleted: number;
        ItemFileMoved: number;
        ItemFileConverted: number;
        ItemVersionDeleted: number;
        FieldAdded: number;
        FieldUpdated: number;
        FieldDeleted: number;
        ListAdded: number;
        ListDeleted: number;
        SiteDeleted: number;
        WebDeleted: number;
        WebMoved: number;
        WebProvisioned: number;
        GroupAdded: number;
        GroupUpdated: number;
        GroupDeleted: number;
        GroupUserAdded: number;
        GroupUserDeleted: number;
        RoleDefinitionAdded: number;
        RoleDefinitionUpdated: number;
        RoleDefinitionDeleted: number;
        RoleAssignmentAdded: number;
        RoleAssignmentDeleted: number;
        InheritanceBroken: number;
        InheritanceReset: number;
        WorkflowStarted: number;
        WorkflowPostponed: number;
        WorkflowCompleted: number;
        EntityInstanceAdded: number;
        EntityInstanceUpdated: number;
        EntityInstanceDeleted: number;
        AppInstalled: number;
        AppUpgraded: number;
        AppUninstalling: number;
        EmailReceived: number;
        ContextEvent: number;
    };
    export type IEventReceiverSynchronizationType = {
        Asynchronous: number;
        Synchronization: number;
    };
    export type IFieldNoteType = {
        EnhancedRichText: number;
        RichText: number;
        TextOnly: number;
    };
    export type IFieldNumberType = {
        Decimal: number;
        Integer: number;
        Percentage: number;
    };
    export type IFieldResultType = {
        Boolean: string;
        Currency: string;
        DateOnly: string;
        DateTime: string;
        Number: string;
        Text: string;
    };
    export type IFieldType = {
        AllDayEvent: number;
        Attachments: number;
        Boolean: number;
        Calculated: number;
        Choice: number;
        Computed: number;
        ContentTypeId: number;
        Counter: number;
        CrossProjectLink: number;
        Currency: number;
        DateTime: number;
        Error: number;
        File: number;
        Geolocation: number;
        GridChoice: number;
        Guid: number;
        Integer: number;
        Invalid: number;
        Lookup: number;
        MaxItems: number;
        ModStat: number;
        MultiChoice: number;
        Note: number;
        Number: number;
        PageSeparator: number;
        Recurrence: number;
        Text: number;
        ThreadIndex: number;
        Threading: number;
        URL: number;
        User: number;
        WorkflowEventType: number;
        WorkflowStatus: number;
    };
    export type IFieldUserSelectionType = {
        PeopleOnly: number;
        PeopleAndGroups: number;
    };
    export type IFileTemplateType = {
        FormPage: number;
        StandardPage: number;
        WikiPage: number;
    };
    export type IFriendlyDateFormat = {
        Unspecified: number;
        Disabled: number;
        Relative: number;
    };
    export type IListTemplateType = {
        AccessRequest: number;
        AdminTasks: number;
        Agenda: number;
        AppDataCatalog: number;
        Announcements: number;
        CallTrack: number;
        Categories: number;
        Circulation: number;
        Comments: number;
        Contacts: number;
        CustomGrid: number;
        DataConnectionLibrary: number;
        DataSources: number;
        Decision: number;
        DesignCatalog: number;
        DeveloperSiteDraftApps: number;
        DiscussionBoard: number;
        DocumentLibrary: number;
        Events: number;
        ExternalList: number;
        Facility: number;
        GanttTasks: number;
        GenericList: number;
        HealthReports: number;
        HealthRules: number;
        HelpLibrary: number;
        Holidays: number;
        HomePageLibrary: number;
        IMEDic: number;
        IssueTracking: number;
        Links: number;
        ListTemplateCatalog: number;
        MasterPageCatalog: number;
        MaintenanceLogs: number;
        MeetingObjective: number;
        Meetings: number;
        MeetingUser: number;
        MySiteDocumentLibrary: number;
        Posts: number;
        NoCodePublic: number;
        NoCodeWorkflows: number;
        PictureLibrary: number;
        SolutionCatalog: number;
        Survey: number;
        Tasks: number;
        TasksWithTimelineAndHierarchy: number;
        TextBox: number;
        ThemeCatalog: number;
        ThingsToBring: number;
        Timecard: number;
        UserInformation: number;
        WebPageLibrary: number;
        WebPartCatalog: number;
        WebTemplateCatalog: number;
        Whereabouts: number;
        WorkflowHistory: number;
        WorkflowProcess: number;
        XMLForm: number;
    };
    export type ILocaleLCIDType = {
        Afrikaans: number;
        Albanian: number;
        ArabicAlgeria: number;
        ArabicBahrain: number;
        ArabicEgypt: number;
        ArabicIraq: number;
        ArabicJordan: number;
        ArabicLebanon: number;
        ArabicLibya: number;
        ArabicMorocco: number;
        ArabicOman: number;
        ArabicQatar: number;
        ArabicSaudiArabia: number;
        ArabicSyria: number;
        ArabicTunisia: number;
        ArabicUAE: number;
        ArabicYemen: number;
        Armenian: number;
        AzeriCyrillic: number;
        AzeriLatin: number;
        Basque: number;
        Belarusian: number;
        Bulgarian: number;
        Catalan: number;
        ChineseHongKongSAR: number;
        ChineseMacaoSAR: number;
        ChinesePRC: number;
        ChineseSingapore: number;
        ChineseTaiwan: number;
        CroatianCroatia: number;
        Czech: number;
        Danish: number;
        Divehi: number;
        DutchBelgium: number;
        DutchNetherlands: number;
        EnglishAustralia: number;
        EnglishBelize: number;
        EnglishCanada: number;
        EnglishCaribbean: number;
        EnglishIreland: number;
        EnglishJamaica: number;
        EnglishNewZealand: number;
        EnglishPhilippines: number;
        EnglishSouthAfrica: number;
        EnglishTrinidad: number;
        EnglishUnitedKingdom: number;
        EnglishUnitedStates: number;
        EnglishZimbabwe: number;
        Estonian: number;
        Faeroese: number;
        Finnish: number;
        FrenchBelgium: number;
        FrenchCanada: number;
        FrenchFrance: number;
        FrenchLuxembourg: number;
        FrenchMonaco: number;
        FrenchSwitzerland: number;
        Galician: number;
        Georgian: number;
        GermanAustria: number;
        GermanGermany: number;
        GermanLiechtenstein: number;
        GermanLuxembourg: number;
        GermanSwitzerland: number;
        Greek: number;
        Gujarati: number;
        HebrewIsrael: number;
        HindiIndia: number;
        Hungarian: number;
        Icelandic: number;
        Indonesian: number;
        ItalianItaly: number;
        ItalianSwitzerland: number;
        Japanese: number;
        Kannada: number;
        Kazakh: number;
        Konkani: number;
        Korean: number;
        KyrgyzCyrillic: number;
        Latvian: number;
        Lithuanian: number;
        MacedonianFYROM: number;
        Malay: number;
        MalayBruneiDarussalam: number;
        Marathi: number;
        MongolianCyrillic: number;
        NorwegianBokmal: number;
        NorwegianNynorsk: number;
        PersianIran: number;
        Polish: number;
        PortugueseBrazil: number;
        PortuguesePortugal: number;
        Punjabi: number;
        Romanian: number;
        Russian: number;
        Sanskrit: number;
        SerbianCyrillic: number;
        SerbianLatin: number;
        Slovak: number;
        Slovenian: number;
        SpanishArgentina: number;
        SpanishBolivia: number;
        SpanishChile: number;
        SpanishColombia: number;
        SpanishCostaRica: number;
        SpanishDominicanRepublic: number;
        SpanishEcuador: number;
        SpanishElSalvador: number;
        SpanishGuatemala: number;
        SpanishHonduras: number;
        SpanishMexico: number;
        SpanishNicaragua: number;
        SpanishPanama: number;
        SpanishParaguay: number;
        SpanishPeru: number;
        SpanishPuertoRico: number;
        SpanishSpain: number;
        SpanishUruguay: number;
        SpanishVenezuela: number;
        Swahili: number;
        Swedish: number;
        SwedishFinland: number;
        Syriac: number;
        Tamil: number;
        Tatar: number;
        Telugu: number;
        ThaiThailand: number;
        Turkish: number;
        Ukrainian: number;
        UrduPakistan: number;
        UzbekCyrillic: number;
        UzbekLatin: number;
        Vietnamese: number;
    };
    export type INodeType = {
        None: number;
        Area: number;
        Page: number;
        List: number;
        ListItem: number;
        PageLayout: number;
        Heading: number;
        AuthoredLinkToPage: number;
        AuthoredLinkToWeb: number;
        AuthoredLinkPlain: number;
        Custom: number;
        Error: number;
        AuthoredLink: number;
        Default: number;
        All: number;
    };
    export type IPageType = {
        DefaultView: number;
        DialogView: number;
        DisplayForm: number;
        DisplayFormDialog: number;
        EditForm: number;
        EditFormDialog: number;
        Invalid: number;
        NewForm: number;
        NewFormDialog: number;
        NormalView: number;
        Page_MAXITEMS: number;
        SolutionForm: number;
        View: number;
    };
    export type IPersonalSiteCapabilities = {
        Education: number;
        Guest: number;
        MyTasksDashboard: number;
        None: number;
        Profile: number;
        Social: number;
        Storage: number;
    };
    export type IPrincipalSources = {
        All: number;
        MembershipProvider: number;
        None: number;
        RoleProvider: number;
        UserInfoList: number;
        Windows: number;
    };
    export type IPrincipalTypes = {
        All: number;
        DistributionList: number;
        None: number;
        SecurityGroup: number;
        SharePointGroup: number;
        User: number;
    };
    export type IRelationshipDeleteBehaviorType = {
        None: number;
        Cascade: number;
        Restrict: number;
    };
    export type IReorderingRuleMatchType = {
        ResultContainsKeyword: number;
        TitleContainsKeyword: number;
        TitleMatchesKeyword: number;
        UrlStartsWith: number;
        UrlExactlyMatches: number;
        ContentTypeIs: number;
        FileExtensionMatches: number;
        ResultHasTag: number;
        ManualCondition: number;
    };
    export type IRoleType = {
        Administrator: number;
        Contributor: number;
        Editor: number;
        Guest: number;
        None: number;
        Reader: number;
        WebDesigner: number;
    };
    export type IUrlFormatType = {
        Hyperlink: number;
        Image: number;
    };
    export type IURLZones = {
        Custom: number;
        Default: number;
        Extranet: number;
        Internet: number;
        Intranet: number;
    };
    export type IUserCustomActionRegistrationType = {
        None: number;
        List: number;
        ContentType: number;
        ProgId: number;
        FileType: number;
    };
    export type IViewType = {
        Calendar: number;
        Chart: number;
        Gantt: number;
        Grid: number;
        Html: number;
        Recurrence: number;
    };
}

declare module 'gd-sprest/mapper/types/tenantApp' {
    import { IBase } from "gd-sprest/utils/types";
    export interface ITenantAppMethods {
        deploy(): IBase;
        install(): IBase;
        remove(): IBase;
        retract(): IBase;
        uninstall(): IBase;
        upgrade(): IBase;
    }
    export interface ITenantAppProps {
        AppCatalogVersion: string;
        CanUpgrade: boolean;
        CurrentVersionDeployed: boolean;
        Deployed: boolean;
        ID: string;
        InstalledVersion: string;
        IsClientSideSolution: boolean;
        Title: string;
    }
    export interface ITenantAppResult extends ITenantAppMethods, ITenantAppProps, IBase<ITenantApp, ITenantAppResult> {
    }
    export interface ITenantApp extends ITenantAppMethods, IBase<ITenantApp, ITenantAppResult> {
    }
}

declare module 'gd-sprest/mapper/types/tenantAppCatalog' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { ITenantApp, ITenantApps } from "gd-sprest/mapper/types";
    export interface ITenantAppCatalogMethods {
        add(overwrite?: boolean, url?: string): IBase<Types.SP.IFile, Types.SP.IFileResult>;
        getById(guid: string): ITenantApp;
    }
    export interface ITenantAppCatalogProps {
        AvailableApps(): ITenantApps;
        SiteCollectionAppCatalogsSites(): IBaseCollection;
    }
    export interface ITenantAppCatalogQueryProps {
        AvailableApps(): ITenantApps;
    }
    export interface ITenantAppCatalogQueryResult extends ITenantAppCatalogMethods, ITenantAppCatalogProps {
    }
    export interface ITenantAppCatalogResult extends ITenantAppCatalogMethods, ITenantAppCatalogProps, ITenantAppCatalogQueryProps, IBase<ITenantAppCatalog, ITenantAppCatalogResult, ITenantAppCatalogQueryResult> {
    }
    export interface ITenantAppCatalog extends ITenantAppCatalogMethods, ITenantAppCatalogQueryProps, IBase<ITenantAppCatalog, ITenantAppCatalogResult, ITenantAppCatalogQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/tenantApps' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { ITenantApp } from "gd-sprest/mapper/types";
    export interface ITenantAppsMethods {
        getById(guid: string): IBase<ITenantApp>;
    }
    export interface ITenantApps extends ITenantAppsMethods, IBaseCollection<ITenantApp> {
    }
}

declare module 'gd-sprest/mapper/types/types' {
    import { IUser } from "gd-sprest/mapper/types/user";
    export interface IAppTiles {
        AppId: string;
        AppPrincipalId: string;
        AppSource: number;
        AppStatus: number;
        AppType: number;
        AssetId: string;
        BaseTemplate: number;
        ChildCount: number;
        ContentMarket: string;
        CustomSettingsUrl: string;
        Description: string;
        IsCorporateCatalogSite: boolean;
        LastModified: string;
        LastModifiedDate: string;
        ProductId: string;
        Target: string;
        Thumbnail: string;
        Title: string;
        Version: number;
    }
    export interface IBasePermissions {
        High: number;
        Low: number;
    }
    export interface IContainsConfidentialInfo {
        ContainsConfidentialInfo: boolean;
        ContainsConfidentialInfoLearnMoreUrl: string;
        ExternalSharingTipsEnabled: boolean;
        ExternalSharingTipsInfoLearnMoreUrl: string;
    }
    export interface IContextInfo {
        FormDigestTimeoutSeconds: number;
        FormDigestValue: string;
        LibraryVersion: string;
        SiteFullUrl: string;
        SupportedSchemaVersions: IResults<string>;
        WebFullUrl: string;
    }
    export interface IEntityData {
        AccountName?: string;
        Department?: string;
        Email?: string;
        IsAltSecIdPresent?: boolean;
        MobilePhone?: string;
        ObjectId?: string;
        PrincipalType?: string;
        SPGroupID?: string;
        SPUserID?: string;
        Title?: string;
    }
    export interface IFeature {
        DefinitionId: string;
    }
    export interface IForm {
        Id: string;
        ResourcePath: IResourcePath;
        ServerRelativeUrl: string;
        FormType: number;
    }
    export interface IInformationRightsManagementSettings {
        AllowPrint: boolean;
        AllowScript: boolean;
        AllowWriteCopy: boolean;
        DisableDocumentBrowserView: boolean;
        DocumentAccessExpireDays: number;
        DocumentLibraryProtectionExpireDate: string;
        EnableDocumentAccessExpire: boolean;
        EnableDocumentBrowserPublishingView: boolean;
        EnableGroupProtection: boolean;
        GroupName: string;
        LicenseCacheExpireDays: number;
        PolicyDescription: string;
        PolicyTitle: string;
        TemplateId: string;
    }
    export interface IMenuNode {
        CustomProperties: IResults<any>;
        FriendlyUrlSegment: string;
        IsDeleted: boolean;
        IsHidden: boolean;
        Key: string;
        Nodes: IResults<IMenuNode>;
        NodeType: number;
        SimpleUrl: string;
        Title: string;
    }
    export interface IMenuState {
        FriendlyUrlPrefix: string;
        Nodes: IResults<IMenuNode>;
        SimpleUrl: string;
        SPSitePrefix: string;
        SPWebPrefix: string;
        StartingNodeKey: string;
        StartingNodeTitle: string;
        Version: string;
    }
    export interface INavigation {
        QuickLaunch: IResults<INavigationNode>;
        TopNavigationBar: IResults<INavigationNode>;
    }
    export interface INavigationNode {
        Id: number;
        IsDocLib: boolean;
        IsExternal: boolean;
        IsVisible: boolean;
        ListTemplateType: number;
        Title: string;
        Url: string;
    }
    export interface ODataQuery {
        Custom?: string;
        Expand?: Array<string>;
        Filter?: string;
        GetAllItems?: boolean;
        OrderBy?: Array<string>;
        Select?: Array<string>;
        Skip?: number;
        Top?: number;
    }
    export interface IRecycleBinItem {
        Author: IUser;
        AuthorEmail: string;
        AuthorName: string;
        DeletedBy: IUser;
        DeletedByEmail: string;
        DeletedByName: string;
        DeletedDate: string;
        DeletedDateLocalFormatted: string;
        DirName: string;
        DirNamePath: IResourcePath;
        Id: string;
        ItemState: number;
        ItemType: number;
        LeafName: string;
        LeafNamePath: IResourcePath;
        Size: string;
        Title: string;
    }
    export interface IRegionalSettings {
        AdjustHijriDays: number;
        AlternateCalendarType: number;
        AM: string;
        CalendarType: number;
        Collation: number;
        CollationLCID: number;
        DateFormat: number;
        DateSeparator: string;
        DecimalSeparator: string;
        DigitGrouping: string;
        FirstDayOfWeek: number;
        FirstWeekOfYear: number;
        IsEastAsia: boolean;
        IsRightToLeft: boolean;
        IsUIRightToLeft: boolean;
        ListSeparator: string;
        LocaleId: number;
        NegativeSign: string;
        NegNumberMode: number;
        PM: string;
        PositiveSign: string;
        ShowWeeks: boolean;
        ThousandSeparator: string;
        Time24: boolean;
        TimeMarkerPosition: number;
        TimeSeparator: string;
        WorkDayEndHour: number;
        WorkDays: number;
        WorkDayStartHour: number;
    }
    export interface IResourcePath {
        DecodedUrl: string;
    }
    export interface IResults<P> {
        results: Array<P>;
    }
    export interface IStringValue {
        StringValue: string;
    }
    export interface ISubscription {
    }
    export interface IThemeInfo {
        AccessibleDescription: string;
        ThemeBackgroundImageUri: string;
    }
    export interface IUpgradeInfo {
        ErrorFile: string;
        Errors: number;
        LastUpdated: string;
        LogFile: string;
        RequestDate: string;
        RetryCount: number;
        StartTime: string;
        Status: number;
        UpgradeType: number;
        Warnings: number;
    }
    export interface IUsageInfo {
        Bandwidth: number;
        DiscussionStorage: number;
        Hits: number;
        Storage: number;
        StoragePercentageUsed: number;
        Visits: number;
    }
    export interface IVisualization {
        DefaultScreen: IVisualizationStyleSet;
        DetailView: IVisualizationStyleSet;
        MediumScreen: IVisualizationStyleSet;
        SmallScreen: IVisualizationStyleSet;
        VisualizationAppInfo: IVisualizationAppInfo;
        VisualizationType: number;
    }
    export interface IVisualizationAppInfo {
        DesignUri: string;
        Id: string;
        RuntimeUri: string;
    }
    export interface IVisualizationField {
        InternalName: string;
        Style: string;
    }
    export interface IVisualizationStyleSet {
        AspectRatio: string;
        BackgroundColor: string;
        Fields: IVisualizationField;
        MinHeight: string;
    }
    export interface IContextWebInfo {
        GetContextWebInformation: IContextInfo;
    }
    export interface IWorkflowTemplate {
        AllowManual: boolean;
        AssociationUrl: string;
        AutoStartChange: boolean;
        AutoStartCreate: boolean;
        Description: string;
        Id: string;
        IsDeclarative: boolean;
        Name: string;
        PermissionsManual: IBasePermissions;
    }
}

declare module 'gd-sprest/mapper/types/user' {
    import { IBase } from "gd-sprest/utils/types";
    import { IGroup, ISiteGroupResults, ISiteGroups, IUser } from "gd-sprest/mapper/types";
    export interface IUserCreationInformation {
        Email?: string;
        LoginName: string;
        Title?: string;
    }
    export interface IUserMethods {
        delete(): IBase;
    }
    export interface IUserProps {
        Email: string;
        Id: string;
        IsHiddenInUI: boolean;
        IsSharedByEmailGuestUser: boolean;
        IsSiteAdmin: boolean;
        LoginName: string;
        PrincipalType: string;
        Title: string;
        UserId: string;
    }
    export interface IUserQueryProps {
        Groups(): ISiteGroups;
        Groups(id: number): IBase<IGroup>;
    }
    export interface IUserQueryResult extends IUserMethods, IUserProps {
        Groups: ISiteGroupResults;
    }
    export interface IUserResult extends IUserMethods, IUserProps, IUserQueryProps, IBase<IUser, IUserResult, IUserQueryResult> {
    }
    export interface IUser extends IUserMethods, IUserQueryProps, IBase<IUser, IUserResult, IUserQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/userCustomAction' {
    import { IBase } from "gd-sprest/utils/types";
    import { IBasePermissions, IUserCustomActionMethods } from "gd-sprest/mapper/types";
    export interface IUserCustomActionCreationInformation {
        CommandUIExtension?: string;
        Description?: string;
        Group?: string;
        ImageUrl?: string;
        Location?: string;
        Name: string;
        RegistrationId?: string;
        RegistrationType?: number;
        Rights?: any;
        ScriptBlock?: string;
        ScriptSrc?: string;
        Sequence?: number;
        Title?: string;
        Url?: string;
    }
    export interface IUserCustomActionMethods {
        delete(): IBase;
    }
    export interface IUserCustomActionProps {
        CommandUIExtension: string;
        Description: string;
        Group: string;
        Id: string;
        ImageUrl: string;
        Location: string;
        Name: string;
        RegistrationId: string;
        RegistrationType: number;
        Rights: IBasePermissions;
        Scope: number;
        ScriptBlock: string;
        ScriptSrc: string;
        Sequence: number;
        Title: string;
        Url: string;
        VersionOfUserCustomAction: string;
    }
    export interface IUserCustomActionQueryProps {
    }
    export interface IUserCustomActionQueryResult extends IUserCustomActionMethods, IUserCustomActionProps {
    }
    export interface IUserCustomActionResult extends IUserCustomActionMethods, IUserCustomActionProps, IUserCustomActionQueryProps, IBase<IUserCustomAction, IUserCustomActionResult, IUserCustomActionQueryResult> {
    }
    export interface IUserCustomAction extends IUserCustomActionMethods, IUserCustomActionQueryProps, IBase<IUserCustomAction, IUserCustomActionResult, IUserCustomActionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/userCustomActions' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IUserCustomAction, IUserCustomActionCreationInformation, IUserCustomActionQueryResult, IUserCustomActionResult } from "gd-sprest/mapper/types";
    export interface IUserCustomActionsMethods {
        add(parameters: IUserCustomActionCreationInformation): IBase<IUserCustomAction, IUserCustomActionResult>;
        clear(): IBase;
        getById(id: any): IUserCustomAction & IBase<IUserCustomAction, IUserCustomActionResult, IUserCustomActionQueryResult>;
        next(): IBase<IUserCustomActions, IUserCustomActionResults>;
    }
    export interface IUserCustomActions extends IUserCustomActionsMethods, IBaseCollection<IUserCustomAction, IUserCustomActionResult, IUserCustomActionQueryResult> {
    }
    export interface IUserCustomActionResults extends IUserCustomActionsMethods, IBaseCollection<IUserCustomActionResult, IUserCustomActionResult, IUserCustomActionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/userProfile' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { IWeb } from "gd-sprest/mapper/types";
    export interface IUserProfile extends IBase<IUserProfile> {
        new (targetInfo?: ITargetInfo): IUserProfile;
        FollowedContent(): IBase<any>;
        AccountName: string;
        DisplayName: string;
        FollowPersonalSiteUrl: string;
        IsPeopleListPublic: boolean;
        IsPrivacySettingOn: boolean;
        IsSelf: boolean;
        JobTitle: string;
        MySiteFirstRunExperience: number;
        MySiteHostUrl: string;
        O15FirstRunExperience: number;
        PersonalSite(): IBase<IWeb>;
        PersonalSiteCapabilities: number;
        PersonalSiteFirstCreationError: string;
        PersonalSiteFirstCreationTime: string;
        PersonalSiteInstantiationState: number;
        PersonalSiteLastCreationTime: string;
        PersonalSiteNumberOfRetries: number;
        PictureImportEnabled: boolean;
        PictureUrl: string;
        PublicUrl: string;
        UrlToCreatePersonalSite: string;
        createPersonalSiteEnque(interactiveFl: boolean): IBase;
        shareAllSocialData(publicFl: boolean): IBase;
    }
}

declare module 'gd-sprest/mapper/types/users' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IUser, IUserCreationInformation, IUserQueryResult, IUserResult } from "gd-sprest/mapper/types";
    export interface IUsersMethods {
        add(userInfo: IUserCreationInformation): IBase<IUser, IUserResult>;
        getByEmail(email: any): IUser & IBase<IUser, IUserResult, IUserQueryResult>;
        getById(id: any): IUser & IBase<IUser, IUserResult, IUserQueryResult>;
        getByLoginName(loginName: any): IUser & IBase<IUser, IUserResult, IUserQueryResult>;
        next(): IBase<IUsers, IUserResults>;
        removeById(id: any): IBase;
        removeByLoginName(loginName: any): IBase;
    }
    export interface IUsers extends IUsersMethods, IBaseCollection<IUser, IUserResult, IUserQueryResult> {
    }
    export interface IUserResults extends IUsersMethods, IBaseCollection<IUserResult, IUserResult, IUserQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/utility' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { ComplexTypes } from "gd-sprest/mapper/types";
    export interface IEmail {
        AdditionalHeaders?: Array<ComplexTypes.KeyValue>;
        BCC?: Array<string>;
        Body: string;
        CC?: Array<string>;
        From?: string;
        To: Array<string>;
        Subject: string;
    }
    export interface IPrincipalResult {
        Department?: string;
        DisplayName?: string;
        Email?: string;
        JobTitle?: string;
        LoginName?: string;
        Mobile?: string;
        PrincipalId?: number;
        PrincipalType?: number;
        SIPAddress?: string;
    }
    export interface IResolvePrincipal {
        addToUserInfoList?: boolean;
        input: string;
        inputIsEmailOnly?: boolean;
        matchUserInfoList?: boolean;
        scopes: number;
        sources: number;
    }
    export interface ISearchPrincipal {
        groupName?: string;
        input: string;
        maxCount: number;
        scopes?: number;
        sources?: number;
    }
    export interface ICreateEmailBodyForInvitationResult extends IBase {
        CreateEmailBodyForInvitation: string;
    }
    export interface IGetCurrentUserEmailAddressesResult extends IBase {
        GetCurrentUserEmailAddresses: string;
    }
    export interface IGetAppLicenseDeploymentIdResult extends IBase {
        GetAppLicenseDeploymentId: string;
    }
    export interface IGetAppLicenseInformationResult extends IBase {
        GetAppLicenseInformation: string;
    }
    export interface IGetLowerCaseStringResult extends IBase {
        GetLowerCaseString: string;
    }
    export interface IResolvePrincipalResult extends IBase {
        ResolvePrincipalInCurrentContext: IPrincipalResult;
    }
    export interface ISearchPrincipalsResult extends IBase {
        results: Array<IPrincipalResult>;
        SearchPrincipalsUsingContextWeb: {
            results: Array<IPrincipalResult>;
        };
    }
    export interface ISendEmailResult extends IBase {
        SendEmail: string;
    }
    export interface IUtilityMethods {
        createEmailBodyForInvitation(pageAddress: string): IBase<IBase, ICreateEmailBodyForInvitationResult>;
        getAppLicenseDeploymentId(): IBase<IBase, IGetAppLicenseDeploymentIdResult>;
        getAppLicenseInformation(): IBase<IBase, IGetAppLicenseInformationResult>;
        getCurrentUserEmailAddresses(): IBase<IBase, IGetCurrentUserEmailAddressesResult>;
        getLocalizedString(sourceValue: string): IBase;
        getLowerCaseString(sourceValue: string, lcid: number): IBase<IBase, IGetLowerCaseStringResult>;
        importAppLicense(url: string): IBase;
        isUserLicensedForEntityInContext(url: string): IBase;
        localizeWebPartGallery(url: string): IBase;
        markDiscussionAsFeatured(url: string): IBase;
        resolvePrincipal(principal: IResolvePrincipal): IBase<IBase, IResolvePrincipalResult>;
        searchPrincipals(principal: ISearchPrincipal): IBase<IBase, ISearchPrincipalsResult>;
        unmarkDiscussionAsFeatured(url: string): IBase;
    }
    export interface IUtility extends IUtilityMethods, IBase<IUtility> {
        new (url?: string, targetInfo?: ITargetInfo): IUtility;
        createWikiPage(pageUrl: string, content?: string): IBase<Types.SP.IFile, Types.SP.IFileResult, Types.SP.IFileQueryResult>;
        sendEmail(email: IEmail): IBase<IBase, ISendEmailResult>;
    }
}

declare module 'gd-sprest/mapper/types/version' {
    export interface IVersion {
        CheckInComment: string;
        Created: string;
        ID: number;
        IsCurrentVersion: boolean;
        Length: number;
        Size: number;
        Url: string;
        VersionLabel: string;
    }
}

declare module 'gd-sprest/mapper/types/versions' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IVersion } from "gd-sprest/mapper/types";
    export interface IVersions extends IBaseCollection<IVersion, IVersion, IVersion> {
        deleteAll(): IBase;
        deleteById(id: any): IBase;
        deleteByLabel(label: any): IBase;
        getById(id: any): IBase<IVersion>;
        next(): IBase<IVersions>;
        restoreByLabel(label: any): IBase<IVersion>;
    }
}

declare module 'gd-sprest/mapper/types/view' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IViewFields } from "gd-sprest/mapper/types";
    export interface IViewCreationInformation {
        JSLink?: string;
        Paged?: boolean;
        PersonalView?: boolean;
        RowLimit?: number;
        SetAsDefaultView?: boolean;
        Title: string;
        ViewQuery?: string;
        ViewTypeKind?: number;
    }
    export interface IViewMethods {
        delete(): IBase;
        renderAsHtml(): IBase;
        update(data: any): IBase;
    }
    export interface IViewProps {
        Aggregations: string;
        AggregationsStatus: string;
        BaseViewId: string;
        ContentTypeId: Types.SP.IStringValue;
        DefaultView: boolean;
        DefaultViewForContentType: boolean;
        EditorModified: boolean;
        Formats: string;
        Hidden: boolean;
        HtmlSchemaXml: string;
        Id: string;
        ImageUrl: string;
        IncludeRootFolder: boolean;
        JSLink: string;
        ListViewXml: string;
        Method: string;
        MobileDefaultView: boolean;
        MobileView: boolean;
        ModerationType: string;
        OrderedView: boolean;
        Paged: boolean;
        PersonalView: boolean;
        ReadOnlyView: boolean;
        RequiresClientIntegration: boolean;
        RowLimit: number;
        Scope: number;
        ServerRelativeUrl: string;
        StyleId: string;
        TabularView: boolean;
        Threaded: boolean;
        Title: string;
        Toolbar: string;
        ToolbarTemplateName: string;
        ViewData: string;
        VisualizationInfo: Types.SP.IVisualization;
        ViewJoins: string;
        ViewProjectedFields: string;
        ViewQuery: string;
        ViewType: string;
    }
    export interface IViewQueryProps {
        ViewFields(): IViewFields;
    }
    export interface IViewQueryResult extends IViewMethods, IViewProps {
        ViewFields: Types.SP.IResults<string>;
    }
    export interface IViewResult extends IViewMethods, IViewProps, IViewQueryProps, IBase<IView, IViewResult, IViewQueryResult> {
    }
    export interface IView extends IViewMethods, IViewQueryProps, IBase<IView, IViewResult, IViewQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/viewFieldCollection' {
    import { IBase } from "gd-sprest/utils/types";
    export interface IViewFields extends IBase<IViewFields, IViewFields, IViewFields> {
        SchemaXml: string;
        Items: string;
        results: Array<any>;
        addViewField(fieldName: any): IBase;
        moveViewFieldTo(field: any, index: any): IBase;
        next(): IBase<IViewFields>;
        removeAllViewFields(): IBase;
        removeViewField(fieldName: any): IBase;
    }
}

declare module 'gd-sprest/mapper/types/views' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IView, IViewCreationInformation, IViewQueryResult, IViewResult } from "gd-sprest/mapper/types";
    export interface IViewsMethods {
        add(parameters: IViewCreationInformation): IBase<IView, IViewResult>;
        getById(id: any): IView & IBase<IView, IViewResult, IViewQueryResult>;
        getByTitle(title: any): IView & IBase<IView, IViewResult, IViewQueryResult>;
        next(): IBase<IViews>;
    }
    export interface IViews extends IViewsMethods, IBaseCollection<IView, IViewResult, IViewQueryResult> {
    }
    export interface IViewResults extends IViewsMethods, IBaseCollection<IViewResult, IViewResult, IViewQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/web' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { ITenantAppCatalog, IWebInfo, IWebResult, IWebResults, IWebs } from "gd-sprest/mapper/types";
    export interface IWebCreationInformation {
        Description?: string;
        Language?: number;
        Title: string;
        Url: string;
        UseSamePermissionsAsParentSite?: boolean;
        WebTemplate: string;
    }
    export interface IWebInfo {
        Configuration: number;
        Created: string;
        Description: string;
        Id: string;
        Language: number;
        LastItemModifiedDate: string;
        LastItemUserModifiedDate: string;
        ServerRelativeUrl: string;
        Title: string;
        WebTemplate: string;
        WebTemplateId: number;
    }
    export interface IWebMethods {
        applyTheme(colorpaletteurl: any, fontschemeurl: any, backgroundimageurl: any, sharegenerated: any): IBase;
        applyWebTemplate(name: any): IBase;
        breakRoleInheritance(copyRoleAssignments: any, clearSubScopes: any): IBase;
        delete(): IBase;
        doesPushNotificationSubscriberExist(id: any): IBase;
        doesUserHavePermissions(high: any, low: any): IBase;
        ensureUser(loginName: string): IBase<Types.SP.IUser, Types.SP.IUserResult, Types.SP.IUserQueryResult>;
        executeRemoteLOB(inputStream: any): IBase;
        getAppBdcCatalog(): IBase;
        getAppBdcCatalogForAppInstance(id: any): IBase;
        getAppInstanceById(id: any): IBase;
        getAppInstancesByProductId(id: any): IBase;
        getAvailableWebTemplates(lcid: any, doIncludeCrossLanguage: any): IBase;
        getCatalog(galleryType: any): IBase;
        getChanges(query: any): IBase;
        getContextWebInformation(): IBase;
        getCustomListTemplates(): IBase;
        getDocumentLibraries(url: any): IBase;
        getEntity(namespace: any, name: any): IBase;
        getFileByServerRelativeUrl(url: any): Types.SP.IFile & IBase<Types.SP.IFile, Types.SP.IFileResult, Types.SP.IFileQueryResult>;
        getFolderByServerRelativeUrl(url: any): Types.SP.IFolder & IBase<Types.SP.IFolder, Types.SP.IFolderResult, Types.SP.IFolderQueryResult>;
        getList(url: any): Types.SP.IList & IBase<Types.SP.IList, Types.SP.IListResult, Types.SP.IListQueryResult>;
        getPushNotificationSubscriber(id: any): IBase;
        getPushNotificationSubscribersByArgs(args: any): IBase;
        getPushNotificationSubscribersByUser(loginName: any): IBase;
        getSubwebsFilteredForCurrentUser(nWebTemplateFilter: any, nConfigurationFilter: any): IBase<Types.SP.IResults<IWebInfo>>;
        getUserById(id: any): Types.SP.IUser & IBase<Types.SP.IUser, Types.SP.IUserResult, Types.SP.IUserQueryResult>;
        getUserEffectivePermissions(loginName: any): IBase;
        getWebUrlFromPageUrl(url: any): any;
        loadAndInstallApp(appPackageStream: any): IBase;
        loadAndInstallAppInSpecifiedLocale(appPackageStream: any, installationLocaleLCID: any): IBase;
        loadApp(appPackageStream: any, installationLocaleLCID: any): IBase;
        mapToIcon(filename: any, progid: any, size: any): IBase;
        processExternalNotification(stream: any): IBase;
        registerPushNotificationSubscriber(deviceAppInstanceId: any, serviceToken: any): IBase;
        resetRoleInheritance(): IBase;
        unregisterPushNotificationSubscriber(id: any): IBase;
        update(data: any): IBase;
    }
    export interface IWebProps {
        AllowRssFeeds: boolean;
        AppInstanceId: string;
        Configuration: number;
        Created: string;
        CustomMasterUrl: string;
        Description: string;
        DocumentLibraryCalloutOfficeWebAppPreviewersDisabled: boolean;
        EnableMinimalDownload: boolean;
        ExcludeFromOfflineClient: boolean;
        Id: string;
        Language: boolean;
        LastItemModifiedDate: string;
        MasterUrl: string;
        MembersCanShare: boolean;
        NoCrawl: boolean;
        NotificationsInOneDriveForBusinessEnabled: boolean;
        NotificationsInSharePointEnabled: boolean;
        OverwriteTranslationsOnChange: boolean;
        PreviewFeaturesEnabled: boolean;
        QuickLaunchEnabled: boolean;
        RecycleBinEnabled: boolean;
        RequestAccessEmail: string;
        SaveSiteAsTemplateEnabled: boolean;
        ServerRelativePath: Types.SP.IResourcePath;
        ServerRelativeUrl: string;
        SiteLogoDescription: string;
        SiteLogoUrl: string;
        SyndicationEnabled: boolean;
        TenantTagPolicyEnabled: boolean;
        ThemeData: string;
        ThemedCssFolderUrl: string;
        ThirdPartyMdmEnabled: boolean;
        Title: string;
        TreeViewEnabled: boolean;
        UIVersion: number;
        UIVersionConfigurationEnabled: boolean;
        Url: string;
        WebTemplate: string;
    }
    export interface IWebQueryProps {
        AllowCreateDeclarativeWorkflowForCurrentUser(): IBase<boolean>;
        AllowDesignerForCurrentUser(): IBase<boolean>;
        AllowMasterPageEditingForCurrentUser(): IBase<boolean>;
        AllProperties(): IBase<Types.SP.IPropertyValues>;
        AllowRevertFromTemplateForCurrentUser(): IBase<boolean>;
        AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser(): IBase<boolean>;
        AllowSavePublishDeclarativeWorkflowForCurrentUser(): IBase<boolean>;
        AllProperties(): IBase;
        AppTiles(): Types.SP.IAppTiles;
        AssociatedMemberGroup(): Types.SP.IGroup;
        AssociatedOwnerGroup(): Types.SP.IGroup;
        AssociatedVisitorGroup(): Types.SP.IGroup;
        Author(): Types.SP.IUser;
        AvailableContentTypes(): IBase<Types.SP.IContentTypes>;
        AvailableFields(): IBase<Types.SP.IFields>;
        ClientWebParts(): IBase;
        ContentTypes(): Types.SP.IContentTypes;
        ContentTypes(id: string): Types.SP.IContentType;
        CurrentUser(): Types.SP.IUser;
        DataLeakagePreventionStatusInfo(): IBase;
        DescriptionResource(): IBase<Types.SP.IResourcePath>;
        DesignerDownloadUrlForCurrentUser(): IBase;
        EffectiveBasePermissions(): IBase<string>;
        EventReceivers(): Types.SP.IEventReceivers;
        EventReceivers(id: string): Types.SP.IEventReceiver;
        Features(): IBase;
        Fields(): Types.SP.IFields;
        Fields(internalNameOrTitle: string): Types.SP.IField;
        Folders(): Types.SP.IFolders;
        Folders(url: string): Types.SP.IFolder;
        Lists(): Types.SP.ILists;
        Lists(name: string): Types.SP.IList;
        ListTemplates(): IBase;
        ListTemplates(name: string): IBase;
        Navigation(): IBase<Types.SP.INavigation>;
        ParentWeb(): IWeb;
        PushNotificationSubscribers(): IBase;
        RecycleBin(): IBase;
        RegionalSettings(): IBase;
        RoleDefinitions(): Types.SP.IRoleDefinitions;
        RoleDefinitions(name: string): Types.SP.IRoleDefinition;
        RootFolder(): Types.SP.IFolder;
        RootFolder(url: string): Types.SP.IFile;
        ShowUrlStructureForCurrentUser(): IBase;
        SiteGroups(): Types.SP.ISiteGroups;
        SiteGroups(name: string): Types.SP.IGroup;
        SiteUserInfoList(): IBase;
        SiteUsers(): Types.SP.IUsers;
        SiteUsers(id: any): Types.SP.IUser;
        SupportedUILanguageIds(): IBase<Number>;
        TenantAppCatalog(): ITenantAppCatalog;
        ThemeInfo(): IBase;
        TitleResource(): IBase<Types.SP.IResourcePath>;
        UserCustomActions(): Types.SP.IUserCustomActions;
        UserCustomActions(id: string): Types.SP.IUserCustomAction;
        WebInfos(): IBase;
        Webs(): IWebs;
        WorkflowAssociations(): IBase;
        WorkflowTemplates(): IBase;
    }
    export interface IWebQueryResult extends IWebMethods, IWebProps {
        AllowCreateDeclarativeWorkflowForCurrentUser?: boolean;
        AllowDesignerForCurrentUser?: boolean;
        AllowMasterPageEditingForCurrentUser?: boolean;
        AllowRevertFromTemplateForCurrentUser?: boolean;
        AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser?: boolean;
        AllowSavePublishDeclarativeWorkflowForCurrentUser?: boolean;
        AllProperties?: Array<string>;
        AppTiles?: Types.SP.IAppTiles;
        AssociatedMemberGroup: Types.SP.IGroupResult;
        AssociatedOwnerGroup: Types.SP.IGroupResult;
        AssociatedVisitorGroup: Types.SP.IGroupResult;
        Author: Types.SP.IUserResult;
        AvailableContentTypes: Types.SP.IResults<Types.SP.IContentTypeResult>;
        AvailableFields: Types.SP.IResults<Types.SP.IFieldResult>;
        ClientWebParts: IBase;
        ContentTypes: Types.SP.IContentTypeResults;
        CurrentUser: Types.SP.IUserResult;
        DataLeakagePreventionStatusInfo: Types.SP.IContainsConfidentialInfo;
        DescriptionResource: Types.SP.IResourcePath;
        DesignerDownloadUrlForCurrentUser: string;
        EffectiveBasePermissions: Types.SP.IBasePermissions;
        EventReceivers: Types.SP.IEventReceiverResults;
        Features: Types.SP.IResults<Types.SP.IFeature>;
        Fields: Types.SP.IFieldResults;
        Folders: Types.SP.IFolderResults;
        Lists: Types.SP.IListResults;
        ListTemplates: Types.SP.IResults<Types.SP.IListTemplate>;
        Navigation: Types.SP.INavigation;
        ParentWeb: IWebResult;
        PushNotificationSubscribers(): IBase;
        RecycleBin: Types.SP.IResults<Types.SP.IRecycleBinItem>;
        RegionalSettings: Types.SP.IRegionalSettings;
        RoleDefinitions: Types.SP.IRoleDefinitionResults;
        RootFolder: Types.SP.IFolderResult;
        ShowUrlStructureForCurrentUser: boolean;
        SiteGroups: Types.SP.ISiteGroupResults;
        SiteUserInfoList: Types.SP.IListResult;
        SiteUsers: Types.SP.IUserResults;
        SupportedUILanguageIds: Types.SP.IResults<number>;
        TenantAppCatalog: ITenantAppCatalog;
        ThemeInfo: Types.SP.IThemeInfo;
        TitleResource: Types.SP.IResourcePath;
        UserCustomActions: Types.SP.IUserCustomActionResults;
        WebInfos: Types.SP.IResults<IWebInfo>;
        Webs: IWebResults;
        WebTemplate: string;
        WorkflowAssociations: Types.SP.IResults<any>;
        WorkflowTemplates: Types.SP.IResults<Types.SP.IWorkflowTemplate>;
    }
    export interface IWebResult extends IWebMethods, IWebProps, IWebQueryProps, IBase<IWeb, IWebResult, IWebQueryResult> {
    }
    export interface IWeb extends IWebMethods, IWebQueryProps, IBase<IWeb, IWebResult, IWebQueryResult> {
        new (url?: string, targetInfo?: ITargetInfo): IWeb;
    }
}

declare module 'gd-sprest/mapper/types/webs' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IWeb, IWebCreationInformation, IWebQueryResult, IWebResult } from "gd-sprest/mapper/types";
    export interface IWebsMethods {
        add(parameters: IWebCreationInformation): IBase<IWeb, IWebResult>;
        next(): IWebs & IBase<IWebs, IWebResults>;
    }
    export interface IWebs extends IWebsMethods, IBaseCollection<IWeb, IWebResult, IWebQueryResult> {
    }
    export interface IWebResults extends IWebsMethods, IBaseCollection<IWebResult, IWebResult, IWebQueryResult> {
    }
}

declare module 'gd-sprest/utils/requestType' {
    import { IRequestType } from "gd-sprest/utils/types";
    export const RequestType: IRequestType;
}

declare module 'gd-sprest/utils/baseHelper' {
    import { Base, Types } from "gd-sprest/utils";
    export class BaseHelper implements Types.IBaseHelper {
        base: Base;
        requestType: number;
        response: string;
        status: number;
        addMethods(base: Base, data: any): void;
        addProperties(base: any, data: any): void;
        updateDataCollection(obj: any, results: any): void;
        updateDataObject(isBatchRequest: boolean): void;
        updateMetadata(base: any, data: any): void;
    }
}

declare module 'gd-sprest/utils/baseRequest' {
    import { Base, BaseHelper, Types, XHRRequest } from "gd-sprest/utils";
    export class BaseRequest extends BaseHelper implements Types.IBaseRequest {
        getAllItemsFl: boolean;
        requestType: number;
        targetInfo: Types.ITargetInfo;
        xhr: XHRRequest;
        executeMethod(methodName: string, methodConfig: Types.IMethodInfo, args?: any): Base<any, any, any>;
        executeRequest(asyncFl: boolean, callback?: (...args) => void): string | this;
        getCollection(method: string, args?: any): Base<any, any, any>;
        getNextSetOfResults(): Base<any, any, any>;
        getProperty(propertyName: string, requestType?: string): Base<any, any, any>;
        updateMetadataUri(metadata: any, targetInfo: Types.ITargetInfo): void;
        validateDataCollectionResults(): PromiseLike<void>;
    }
}

declare module 'gd-sprest/utils/baseExecution' {
    import { BaseRequest, TargetInfo, Types } from "gd-sprest/utils";
    export class BaseExecution<Type = any, Result = Type> extends BaseRequest implements Types.IBaseExecution {
        batchRequests: Array<Array<{
            callback?: any;
            response?: BaseExecution;
            targetInfo: TargetInfo;
        }>>;
        parent: BaseExecution;
        responseIndex: number;
        responses: Array<BaseExecution>;
        waitFlags: Array<boolean>;
        batch(arg?: any): this;
        execute(...args: any[]): this;
        executeAndWait(): string | this;
        waitForRequestsToComplete(callback: () => void, requestIdx?: number): void;
    }
}

declare module 'gd-sprest/utils/base' {
    import { BaseExecution, Types } from "gd-sprest/utils";
    export class Base<Type = any, Result = Type, QueryResult = Result> extends BaseExecution<Type, Result> implements Types.IBase {
        constructor(targetInfo: Types.ITargetInfo);
        existsFl: any;
        done<T = Types.IBase>(resolve: (value?: T) => void): void;
        getInfo(): Types.IRequestInfo;
        stringify(): string;
    }
}

declare module 'gd-sprest/utils/batch' {
    import { TargetInfo } from "gd-sprest/utils";
    export class Batch {
        static getTargetInfo(requests: Array<Array<{
            callback?: any;
            targetInfo: TargetInfo;
        }>>): TargetInfo;
    }
}

declare module 'gd-sprest/utils/methodInfo' {
    import { Types } from "gd-sprest/utils";
    export class MethodInfo implements Types.IMethodInfo {
        constructor(methodName: string, methodInfo: Types.IMethodInfo, args: any);
        readonly body: string;
        readonly getAllItemsFl: boolean;
        readonly replaceEndpointFl: boolean;
        readonly requestMethod: string;
        readonly url: string;
    }
}

declare module 'gd-sprest/utils/oData' {
    import { Types } from "gd-sprest/";
    export class OData {
        constructor(oData: Types.SP.ODataQuery);
        Custom: string;
        Expand: Array<string>;
        Filter: string;
        GetAllItems: boolean;
        OrderBy: Array<string>;
        readonly QueryString: string;
        Select: Array<string>;
        Skip: number;
        Top: number;
    }
}

declare module 'gd-sprest/utils/targetInfo' {
    import { IRequestInfo, ITargetInfo } from "gd-sprest/utils/types";
    export class TargetInfo {
        constructor(targetInfo: ITargetInfo);
        request: ITargetInfo;
        readonly isBatchRequest: boolean;
        requestData: any;
        readonly requestInfo: IRequestInfo;
        requestHeaders: object;
        requestMethod: string;
        requestUrl: string;
    }
}

declare module 'gd-sprest/utils/xhrRequest' {
    import { TargetInfo } from "gd-sprest/utils";
    export class XHRRequest {
        constructor(asyncFl: boolean, targetInfo: TargetInfo, callback?: (...args) => void);
        readonly completedFl: boolean;
        readonly response: any;
        readonly request: any;
        readonly requestData: any;
        readonly requestUrl: string;
        readonly status: number;
    }
}

declare module 'gd-sprest/utils/types' {
    export * from "gd-sprest/utils/types/base";
    export * from "gd-sprest/utils/types/baseExecution";
    export * from "gd-sprest/utils/types/baseHelper";
    export * from "gd-sprest/utils/types/baseRequest";
    export * from "gd-sprest/utils/types/methodInfo";
    export * from "gd-sprest/utils/types/requestType";
    export * from "gd-sprest/utils/types/targetInfo";
}

declare module 'gd-sprest/' {
    import "core-js/es6/promise";
    import * as Helper from "gd-sprest/helper";
    import { SPTypes } from "gd-sprest/mapper";
    import * as Types from "gd-sprest/types";
    export * from "gd-sprest/lib";
    export * from "gd-sprest/rest";
    export { Helper, SPTypes, Types };
}

declare module 'gd-sprest/lib/types/contextInfo' {
    import { Types } from "gd-sprest/";
    import { Types as BaseTypes } from "gd-sprest/utils";
    export interface IContextInformation {
        aadInstanceUrl: string;
        aadTenantId: string;
        alertsEnabled: boolean;
        allowSilverlightPrompt: boolean;
        blockDownloadsExperienceEnabled: boolean;
        canUserCreateMicrosoftForm: boolean;
        canUserCreateVisioDrawing: boolean;
        cdnPrefix: string;
        clientServerTimeDelta: number;
        CorrelationId: string;
        crossDomainPhotosEnabled: boolean;
        currentCultureLCID: string;
        currentCultureName: string;
        currentLanguage: string;
        currentUICultureName: string;
        departmentId: string;
        DesignPackageId: string;
        disableAppViews: boolean;
        disableFlows: boolean;
        document: HTMLDocument;
        env: string;
        existsFl: boolean;
        farmLabel: string;
        fid: string;
        formDigestTimeoutSeconds: number;
        formDigestValue: string;
        groupColor: string;
        groupHasHomepage: boolean;
        groupId: string;
        groupType: string;
        guestsEnabled: boolean;
        hasManageWebPermissions: boolean;
        hasPendingWebTemplateExtension: boolean;
        hideSyncButtonOnODB: boolean;
        hubSiteId: boolean;
        idleSessionSignOutEnabled: boolean;
        isAnonymousGuestUser: boolean;
        isAppWeb: boolean;
        isEmailAuthenticatinoGuesUser: boolean;
        isExternalGuestUser: boolean;
        isHubSite: boolean;
        isMultiGeoTenant: boolean;
        isNoScriptEnabled: boolean;
        isSiteAdmin: boolean;
        isSPO: boolean;
        isTenantDevSite: boolean;
        isWebWelcomePage: boolean;
        layoutsUrl: string;
        listBaseTemplate: number;
        listId: string;
        listPermMask: Types.SP.IBasePermissions;
        listTitle: string;
        listUrl: string;
        maximumFileSize: number;
        nid: string;
        openInClient: boolean;
        pageItemId: number;
        pageListId: string;
        pagePermMask: Types.SP.IBasePermissions;
        pagePersonalizationScope: number;
        preferUserTimeZone: boolean;
        PreviewFeaturesEnabled: boolean;
        profileUrl: string;
        PublishingFeatureOn: boolean;
        RecycleBinItemCount: number;
        serverRedirectedUrl: string;
        serverRequestPath: string;
        serverTime: string;
        showNGSCDialogForSyncOnODB: boolean;
        showNGSCDialogForSyncOnTS: boolean;
        siteAbsoluteUrl: string;
        siteClassification: string;
        siteClientTag: string;
        siteColor: string;
        siteId: string;
        sitePagesEnabled: boolean;
        siteServerRelativeUrl: string;
        siteSubscriptionId: string;
        supportPercentStorePage: boolean;
        supportPoundStorePath: boolean;
        systemUserKey: string;
        tenantAppVersion: string;
        themeCacheToken: string;
        themeCssFolderUrl: string;
        themeImageFileNames: any;
        updateFromDigestPageLoaded: Date;
        userDisplayName: string;
        userEmail: string;
        userFirstDayOfWeek: any;
        userId: number;
        userLoginName: string;
        userTime24: boolean;
        userTimeZoneData: any;
        viewId: string;
        viewOnlyExperienceEnabled: boolean;
        webAbsoluteUrl: string;
        webDescription: string;
        webFirstDayOfWeek: number;
        webId: string;
        webLanguage: number;
        webLogoUrl: string;
        webPermMask: Types.SP.IBasePermissions;
        webServerRelativeUrl: string;
        webTemplate: string;
        webTime24: boolean;
        webTitle: string;
        webUIVersion: number;
        window: {
            $REST: any;
            addEventListener: any;
            clearInterval: any;
            document: HTMLDocument;
            setInterval: any;
            SP: any;
            SPClientTemplates: any;
        };
        generateGUID: () => string;
        getWeb(url: string): BaseTypes.IBase<Types.SP.IContextWebInfo>;
    }
}

declare module 'gd-sprest/lib/types/jslink' {
    export interface IFieldTemplate {
        DisplayForm?: any;
        EditForm?: any;
        Name: string;
        NewForm?: any;
        View?: any;
    }
    export interface ITemplates {
        Body?: any;
        Footer?: any;
        Fields?: Array<IFieldTemplate>;
        Group?: any;
        Header?: any;
        Item?: any;
        OnPostRender?: any;
        OnPreRender?: any;
    }
    export interface IJSLinkCfg {
        BaseViewID?: number | string;
        ListTemplateType?: number;
        OnPostRender?: any;
        OnPreRender?: any;
        Templates?: ITemplates;
    }
    export interface IJSLink extends IJSLinkCfg {
        new (cfg?: IJSLinkCfg): IJSLink;
        getTemplate(): IJSLinkCfg;
        register(): void;
    }
}

declare module 'gd-sprest/utils/types/base' {
    import { Types } from "gd-sprest/";
    import { IBaseExecution, IRequestInfo } from "gd-sprest/utils/types";
    export interface IBase<Type = any, Result = Type, QueryResult = Result> extends IBaseExecution<Type, Result> {
        existsFl: boolean;
        parent: any;
        response: string;
        done<T = IBase>(resolve: (value?: T) => void): any;
        getInfo(): IRequestInfo;
        query?(query: Types.SP.ODataQuery): IBase<Result, QueryResult>;
        stringify(): string;
    }
    export interface IBaseCollectionResult<Result> extends Types.SP.IResults<Result> {
        existsFl: boolean;
        response: string;
        stringify(): string;
    }
    export interface IBaseCollection<Type = any, Result = Type, QueryResult = Result> extends Types.SP.IResults<Type>, IBase<IBaseCollectionResult<Result>, IBaseCollectionResult<Result>, IBaseCollectionResult<QueryResult>> {
    }
}

declare module 'gd-sprest/utils/types/baseExecution' {
    import { BaseExecution, TargetInfo } from "gd-sprest/utils";
    import { IBaseRequest } from "gd-sprest/utils/types";
    export interface IBaseExecution<Type = any, Result = Type> extends IBaseRequest {
        batchRequests: Array<Array<{
            callback?: any;
            response?: BaseExecution;
            targetInfo: TargetInfo;
        }>>;
        parent: BaseExecution;
        responseIndex: number;
        responses: Array<BaseExecution>;
        waitFlags: Array<boolean>;
        batch(resolve: (value?: Result) => void): Type;
        batch(appendFl?: boolean): Type;
        execute(waitFl: boolean): Type;
        execute(resolve?: (value?: Result) => void, waitFl?: boolean): Type;
        executeAndWait(): Result;
        waitForRequestsToComplete(callback: () => void, requestIdx?: number): any;
    }
}

declare module 'gd-sprest/utils/types/baseHelper' {
    import { Base } from "gd-sprest/utils";
    export interface IBaseHelper {
        base: Base;
        requestType: number;
        response: string;
        status: number;
        addMethods(base: Base, data: any): any;
        addProperties(base: Base, data: any): any;
        updateDataCollection(obj: Base, results: Array<Base>): any;
        updateDataObject(isBatchRequest: boolean): any;
        updateMetadata(base: any, data: any): any;
    }
}

declare module 'gd-sprest/utils/types/baseRequest' {
    import { XHRRequest } from "gd-sprest/utils";
    import { IBaseHelper, IMethodInfo, ITargetInfo } from "gd-sprest/utils/types";
    export interface IBaseRequest extends IBaseHelper {
        getAllItemsFl: boolean;
        targetInfo: ITargetInfo;
        xhr: XHRRequest;
        executeMethod(methodName: string, methodConfig: IMethodInfo, args?: any): any;
        executeRequest(asyncFl: boolean, callback?: (...args) => void): any;
        getCollection(method: string, args?: any): any;
        getNextSetOfResults(): any;
        getProperty(propertyName: string, requestType?: string): any;
        updateMetadataUri(metadata: any, targetInfo: ITargetInfo): any;
        validateDataCollectionResults(): PromiseLike<void>;
    }
}

declare module 'gd-sprest/utils/types/methodInfo' {
    export interface IMethodInfo {
        argNames?: Array<string>;
        argValues?: Array<any>;
        data?: any;
        getAllItemsFl?: boolean;
        inheritMetadataType?: boolean;
        metadataType?: string;
        name?: string;
        replaceEndpointFl?: boolean;
        requestMethod?: string;
        requestType?: number;
        returnType?: string;
    }
}

declare module 'gd-sprest/utils/types/requestType' {
    export type IRequestType = {
        Custom: number;
        Delete: number;
        Merge: number;
        OData: number;
        Get: number;
        GetBuffer: number;
        GetWithArgs: number;
        GetWithArgsInBody: number;
        GetWithArgsInQS: number;
        GetWithArgsValueOnly: number;
        GetReplace: number;
        Post: number;
        PostWithArgs: number;
        PostWithArgsInBody: number;
        PostWithArgsInQS: number;
        PostWithArgsValueOnly: number;
        PostReplace: number;
    };
}

declare module 'gd-sprest/utils/types/targetInfo' {
    export interface IRequestInfo {
        data?: object;
        method: string;
        url: string;
    }
    export interface ITargetInfo {
        bufferFl?: boolean;
        callback?: () => void;
        data?: any;
        defaultToWebFl?: boolean;
        endpoint?: string;
        method?: string;
        overrideDefaultRequestToHostFl?: boolean;
        requestDigest?: string;
        requestHeader?: object;
        requestInfo?: object;
        url?: string;
    }
}

